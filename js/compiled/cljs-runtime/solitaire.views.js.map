{"version":3,"sources":["solitaire/views.cljs"],"mappings":";;;AAmCA,4BAAA,5BAAMA,gEAAWC;AAAjB,AACE,IAAMC,SAAUD,DAAkC,CAAA,AAAA,AAAA,8BAAA;AAAlD,AACE,QAAM,AAAA,AAAA,AAAIA,8BAAmCC;;AAEjD,sBAAA,tBAAMC,oDAAKC;AAAX,AACE,IAAMH,WAAS,AAACO;IAAhBH,aACsB,yCAAA,zCAACM;cADvB,AAAAL,4CAAAD,WAAA,IAAA,rEACOI;YADP,AAAAH,4CAAAD,WAAA,IAAA,nEACeK;IADfH,aAEsB,yCAAA,zCAACI;cAFvB,AAAAL,4CAAAC,WAAA,IAAA,rEAEOK;YAFP,AAAAN,4CAAAC,WAAA,IAAA,nEAEeM;AAFf,AAGE,2EAAA,3EAACC;AAAD,AACE,OAACd,0BAAUC;;;AAJf,0FAAA,oDAKS,6GAAA,2CAAA,4DAAA,6DAAA,jRAACc,uGAAMX,oGACMH;AADb,AAEmB,IAAAe,WAAO,AAACC,cAAIL;AAAZ,AAAA,kFAAAI,4BAAAA,tGAACH,sCAAAA,gDAAAA;GAFpB,4EAAA;AAAA,AAG0B,kFAAA,wBAAA,lGAACH,sCAAAA,4CAAAA;GAH3B,0EAAA;AAAA,AAIyB,kFAAA,yBAAA,nGAACA,sCAAAA,6CAAAA;iBATnC,mFAAA,kEAAA,2CAAA,qDAAA,mFAAA,IAAA,IAAA,4BAAA,mFAAA,sFAAA,2CAAA,uDAWkC,2BAAA,UAAA,nBAAID;;AAExC,6BAAA,7BAAMS;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,wEAAA,yEAAA,mFAAA,kDAAA,oBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,yDAAA,QAAA,yDAAA,wEAAA,mFAAA,wHAAA,mFAAA,iEAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,6BAAA,mFAAA,qEAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,4BAAA,mFAAA,qEAAA,2CAAA,8DAAA,mFAAA,KAAA,IAAA,rpCAOQC,okBAEEhB,wXACAA","names":["solitaire.views/rotate-fn","mesh-ref","new-r","solitaire.views/box","props","vec__25221","cljs.core.nth","vec__25224","js/module$node_modules$react$index.useRef","hovered","hover","js/module$node_modules$react$index.useState","clicked","click","js/module$node_modules$$react_three$fiber$dist$react_three_fiber_cjs.useFrame","cljs.core.merge","G__25227","cljs.core/not","solitaire.views/main-panel","js/module$node_modules$$react_three$fiber$dist$react_three_fiber_cjs.Canvas"],"sourcesContent":["(ns solitaire.views\n  (:require\n   [\"@react-three/fiber\" :as fib]\n   [\"react\" :refer [useRef useState]]\n   ; [re-frame.core :as re-frame]\n   ))\n\n; (re-frame/reg-event-db\n;  ::tmp\n;  (fn [db k v]\n;    (assoc db k v)))\n\n; (re-frame/reg-event-db\n;  ::tmp-in\n;  (fn [db kl v]\n;    (assoc-in db kl v)))\n\n; (re-frame/reg-event-fx\n;  ::tmp-fn\n;  (fn [{:keys [db]} afn]\n;    (afn db)))\n\n; (re-frame/reg-sub\n;  ::tmp\n;  (fn [db [_ k]]\n;    (get db k)))\n\n; (re-frame/reg-sub\n;  ::tmp-in\n;  (fn [db [_ kl]]\n;    (get-in db kl)))\n\n; (defn sub< [subv] (re-frame/subscribe subv))\n; (defn evt> [evtv] (re-frame/dispatch evtv))\n\n(defn rotate-fn [mesh-ref]\n  (let [new-r (-> mesh-ref .-current .-rotation .-x (+ 0.01))]\n    (set! (-> mesh-ref .-current .-rotation .-x) new-r)))\n\n(defn box [props]\n  (let [mesh-ref (useRef)\n        [hovered hover] (useState false)\n        [clicked click] (useState false)]\n    (fib/useFrame\n     #(rotate-fn mesh-ref))\n    [:mesh (merge props\n                  {:ref mesh-ref\n                   :on-click #(click (not clicked))\n                   :on-pointer-over #(hover true)\n                   :on-pointer-out #(hover false)})\n     [:boxGeometry {:args [1 1 1]}]\n     [:meshStandardMaterial {:color (if hovered \"hotpink\" \"orange\")}]]))\n\n(defn main-panel []\n  [:div {:style {:display :flex\n                 :flex-direction :column}}\n   [:h1 \"test page\"]\n   [:div {:style {:display :flex\n                  :height \"500px\"\n                  :border :solid}}\n    [:> fib/Canvas\n     [:pointLight {:position [10 10 10]}]\n     [:f> box {:position [1.2 0 0]}]\n     [:f> box {:position [-1.2 0 0]}]]]])\n"]}
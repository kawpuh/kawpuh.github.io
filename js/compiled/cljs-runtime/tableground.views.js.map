{"version":3,"sources":["tableground/views.cljs"],"mappings":";AAcA,AAQA,8BAAA,9BAAMA,oEAAWC;AAAjB,AACE,IAAMC,SAAUD,DAAkC,CAAA,AAAA,AAAA,8BAAA;AAAlD,AACE,QAAM,AAAA,AAAA,AAAIA,8BAAmCC;;AAKjD,AAAKC,8BAAU,KAAAC,yFAAA,vDAAc,KAAAC,oCAAA,IAAA,IAAA;AAC7B,6BAAA,7BAAMC;AAAN,AAAkB,0BAAA,mFAAA,IAAA,IAAA,IAAA,IAAA,IAAA,1HAACC;;AACnB,AAAKC,oCAAgB,KAAAH;AACrB,AAAKI,8BAAU,6CAAA,7CAACC;AAChB,AAAKC,6BAAS,KAAAC,wCAAA,IAAA,IAAA;AACd,AAAKC,8BAAU,6CAAA,7CAACH;AAChB,AAAKI,iCAAa,6CAAA,7CAACJ;AACnB,AAAKK,8BAAU,AAACC,gDAAO,AAACV;AACxB,AAAKW,8BAAU,gDAAA,hDAACD;AAChB,AAAKE,8BAAU,gDAAA,hDAACF;AAChB,AAAKG,+BAAW,gDAAA,2CAAA,mDAAA,IAAA,qEAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,wBAAA,yEAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,wBAAA,qEAAA,IAAA,yEAAA,9tBAACH;AAKjB,AAAKI,sCAAkB,6CAAA,7CAACV;AAExB,GAAA,QAAAW,wCAAAC,8CAAAC;AAAA;AAAA,AAAA,iCAAA,mFAAA,mFAAA,KAAA,aAAA,mFAAA,IAAA,aAAA,mFAAA,IAAA,aAAA,mFAAA,KAAA,YAAA,mFAAA,IAAA,YAAA,mFAAA,IAAA,/rBAASC;;AAOT,6CAAA,7CAAMC;AAAN,AAEE,aAAA,AAAAC,TAAMC,yBAAQlB;IACRmB,SAAO,6CAAA,WAAAC,xDAACE;AAAD,AAAO,OAAAF;GAAP,WAAAC;AAAA,AAAgB,OAAAA;;IACvBE,OAAK,AAAkCL;AAF7C,AAGE,AAAqBK;;8PAEhB,AAAC,6CAAA,WAAAC,xDAACF,nDACF,AAACI,4CAAIP,vPACL,OAACO,4CAAI,AAACC,gDAAQC,cAAIC,kBAAG,AAACC,+CAAO,AAACX,OAAO,AAAYD;AAFhD,AAAO,OAAAM;GAAP,WAAAC;AAAA,AAAkB,OAAAA;IADnB,AAAeF;;AAKxB,+CAAA,/CAAMQ,sGAAsBC,EAAEC;AAA9B,AACE,IAAAC,aAAoC,AAAClB;IAArCmB,aAAA,AAAAC,4CAAAF,WAAA,IAAA;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQG;YAAR,AAAAF,4CAAAD,WAAA,IAAA,nEAAcI;IAAdF,aAAA,AAAAD,4CAAAF,WAAA,IAAA;YAAA,AAAAE,4CAAAC,WAAA,IAAA,nEAAsBG;YAAtB,AAAAJ,4CAAAC,WAAA,IAAA,nEAA4BI;AAA5B,AACE,SAAK,EAAA,iBAAA,hBAAGH,QAAMN,SAAAA,IAAEQ,cAAO,EAAA,iBAAA,hBAAGD,QAAMN,SAAAA,IAAEQ;;AAEtC,6CAAA,7CAAMC;AAAN,AACE,IAAAC,aAAoC,AAAC3B;IAArC4B,aAAA,AAAAR,4CAAAO,WAAA,IAAA;YAAA,AAAAP,4CAAAQ,WAAA,IAAA,nEAAQN;YAAR,AAAAF,4CAAAQ,WAAA,IAAA,nEAAcL;IAAdM,aAAA,AAAAT,4CAAAO,WAAA,IAAA;YAAA,AAAAP,4CAAAS,WAAA,IAAA,nEAAsBL;YAAtB,AAAAJ,4CAAAS,WAAA,IAAA,nEAA4BJ;AAA5B,AACE,yHAAA,lHAACf,4CAAI,iEAAA,jEAACC,gDAAQmB,yGAAQ,CAAGR,QAAME,OAAO,CAAGD,QAAME;;AAEnD,8CAAA,9CAAMM,oGAA2BC;AAAjC,AACE,AAACC,8CACA,AAACvB,4CACA,WAAAwB,SAAAC;AAAA,AAAA,IAAAC,aAAAF;iBAAA,AAAAd,4CAAAgB,WAAA,IAAA,xEAAMG;IAANF,aAAA,AAAAjB,4CAAAgB,WAAA,IAAA;eAAA,AAAAhB,4CAAAiB,WAAA,IAAA,tEAAkB7D;gBAAlB,AAAA4C,4CAAAiB,WAAA,IAAA,vEAA2BG;IAA3BF,aAAAH;QAAA,AAAAf,4CAAAkB,WAAA,IAAA,/DAAwCtB;QAAxC,AAAAI,4CAAAkB,WAAA,IAAA,/DAA0CrB;AAA1C,AACE,CAAM,AAAA,AAAA,AAAIzC,8BAAmCwC;;AAC7C,QAAM,AAAA,AAAA,AAAIxC,8BAAmCyC;GAC/Ce,OACA,AAACtB,4CAAI,WAAA+B,SAAAC;AAAA,AAAA,IAAAC,aAAAF;SAAA,AAAArB,4CAAAuB,WAAA,IAAA,hEAAME;SAAN,AAAAzB,4CAAAuB,WAAA,IAAA,hEAASG;IAATF,aAAAF;SAAA,AAAAtB,4CAAAwB,WAAA,IAAA,hEAAcG;SAAd,AAAA3B,4CAAAwB,WAAA,IAAA,hEAAiBI;AAAjB,AAAA,0FAAuB,CAAGH,KAAGE,IAAI,CAAGD,KAAGE;GACvCjD,+BACA,AAACe,+CAAO,AAACY;;AAChBM;;AAEF,AAAKiB,6BACH,KAAAC,6CAAA,IAAA,IAAA,KAAA;AACF,AAAKC,4BAAQ,KAAAC,iDAA6B,qBAAA,2CAAA,uDAAA,vHAACC;AAE3C,AAAKC,gCAAY,6CAAA,7CAACrE;AAClB,mCAAA,2CAAA,IAAA,mFAAA,IAAA,IAAA,YAAA,IAAA,mFAAA,MAAA,IAAA,YAAA,IAAA,mFAAA,IAAA,IAAA,aAAA,IAAA,mFAAA,IAAA,IAAA,cAAA,IAAA,mFAAA,KAAA,IAAA,YAAA,IAAA,mFAAA,MAAA,IAAA,5sBAAKsE;AAOL,yBAAA,zBAAMC,0DAAMC;AAAZ,AACE,IAAMC,OAAK,gDAAA,hDAACC;AAAZ,AAAA,0FAAA,oFAAA,2CAAA,4DAAA,aAAA,mFAAA,2RAAA,mFAAA,oDAAA,2CAAA,oGAAA,gFAAA,8DAAA,mGAAA,oBAAA,uDAAA,zlCACMC,kSACK,uGAAA,2CAAA,0DAAA,5MAACC,yNACMJ,2PACQC,AACA,AACA,AACA,mGACJ,AAAQ,AAAaA,qKACpB,WAAA,VAAGI,mBAAaA;;AAGzC,0BAAA,1BAAMC,4DAAOC;AAAb,AACE,oDAAA,mFAAA,hIAACC,8LAEA,iBAAAC,qBAAA,gDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA41EgD,AAAAmE,sBAAAxE;IA51EhDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAAA,wEAAA,2CAAA,8DAAA,mFAAA,eAAA,lOACOnB,uNAAmB,CAAA,OAAQ+B;;AADlC,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,sCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAS,gBAAAjB,pBAAMoB;AAAN,AAAA,OAAAF,eAAA,mFAAA,wEAAA,2CAAA,8DAAA,mFAAA,eAAA,4BAAA,AAAAH,sCAAA,AAAAI,eAAAnB,nTACOX,uNAAmB,CAAA,OAAQ+B;;;AADlC;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAAQ,AAACsB,8CAAMxB;;;AAGlB,4BAAA,5BAAMyB,gEACFC;AADJ,AAEG,IAAMlH,WAAS,AAACmH;IACVC,IAAE,AAACC,sBAAOvC,8BAAY9E;IACtBsH,MAAI,AAACC,4CAAIxC,iCAAemC;IACxBM,cAAY,0HAAA,1HAACC,mDAAcC;AAHjC,AAAA,0FAAA,sDAAA,mFAAA,oDAAA,2CAAA,4DAAA,wFAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,0EAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,YAAA,sFAAA,gHAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,MAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,gHAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,YAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,KAAA,aAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,cAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,sFAAA,gHAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,cAAA,8DAAA,mFAAA,IAAA,IAAA,cAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,MAAA,cAAA,8DAAA,mFAAA,IAAA,IAAA,cAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,MAAA,aAAA,8DAAA,mFAAA,IAAA,IAAA,cAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,aAAA,8DAAA,mFAAA,IAAA,IAAA,cAAA,sFAAA,gHAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,MAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,KAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,MAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,YAAA,sFAAA,gHAAA,mFAAA,sDAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,KAAA,aAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,KAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,MAAA,KAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,aAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,wGAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,YAAA,8DAAA,mFAAA,MAAA,IAAA,YAAA,sFAAA,gHAAA,mFAAA,qFAAA,2CAAA,uDAAA,kCAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,IAAA,aAAA,8DAAA,mFAAA,KAAA,IAAA,oBAAA,mFAAA,kEAAA,2CAAA,qDAAA,mFAAA,IAAA,IAAA,4BAAA,mFAAA,qFAAA,2CAAA,uDAAA,0BAAA,kKAAA,2CAAA,uEAAA,yDAAA,KAAA,qDAAA,IAAA,8DAAA,mFAAA,KAAA,MAAA,YAAA,8DAAA,mFAAA,IAAA,IAAA,8BAAA,mFAAA,qFAAA,2CAAA,uDAAA,QAAA,6DAAA,96jBAKgB1H,sEACKU,+PAKA4G,wiBAGE3C,uFACAF,0vBAIAE,uFACAF,umBAGAE,uFACAF,qvBAIAE,uFACAF,smBAGAE,uFACAF,wmBAGAE,uFACAF,0vBAIAE,uFACAF,0mBAGAE,uFACAF,ymBAGAE,uFACAF,wmBAGAE,uFACAF,svBAIAE,uFACAF,umBAGAE,uFACAF,wmBAGAE,uFACAF,wmBAGAE,uFACAF,ymBAGAE,uFACAF,0vBAIAE,uFACAF,wmBAGAE,uFACAF,wmBAGAE,uFACAF,wmBAGAE,uFACAF,umBAGAE,uFACAF,umBAGAE,uFACAF,ykDAQlB,AAACkD,+BAAoBC,iJACd,AAAQJ,6dAKfN;;AAKR,AAAA,+BAAA,uCAAAW,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD;AAAN,AAAA,0FAAA,8EAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,YAAA,iEAAA,9SACWA;;;AADX,CAAA,6DAAA,WAAAE,xEAAMF;AAAN,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAX,4CAAAW,eAAA,tEAEYE;iBAFZ,AAAAb,4CAAAW,eAAA,xEAEqBG;AAFrB,AAGG,IAAMrI,WAAS,AAACmH;IACVK,cAAY,0HAAA,1HAACC,mDAAcC;IAC3BY,SAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA3F,4CAAA4F,WAAA,IAAA,/DAAMhG;QAAN,AAAAI,4CAAA4F,WAAA,IAAA,/DAAQ/F;AAAR,AACE,CAAM,AAAA,AAAA,AAAIzC,8BAAmCwC;;AAC7C,QAAM,AAAA,AAAA,AAAIxC,8BAAmCyC;;IACtDgG,QAAM,WAAKC;AAAL,AAAQ,QAAM,AAAA,AAAA,AAAI1I,8BAAmC0I;;IAC3DC,YAAU,WAAKC;AAAL,AACE,QAAM,AAAA,AAAA,AAAIC,6BACJ,kCAAA,UAAA,1BAAID;;IACtBE,aAAW,AAACC,kDACA,WAAKC;AAAL,AACE,oBACE,iBAAAC,oBAAK,AAAoBD;AAAzB,AAAA,oBAAAC;AACK,OAACC,cAAI,AAAoBF;;AAD9BC;;;AACmC,iBAAA,VAACN;;AAFtC,oBAGE,AAAqBK;AAAG,iBAAA,VAACL;;AAH3B;;;;IAIdQ,YAAU,AAACC,iDACA,WAAKJ;AAAL,AACE,oBAAM,AAAqBA;AAA3B,AAEE,AAACP,MAAM,8BAAA,7BAAG,AAACY,iBAAOjB;;AAFpB;;AAIA,IAAMkB,YAAI,AAA8BN;IAClCO,YAAI,AAAkBD;AAD5B,AAEE,AAAiBC,yBAAIrJ,4BAAUK;;AACjC,oBAAI,AAAoByI;AAEtB,AACE,GAAA,GACC,AAACzG,6CAAqB,AAAKhC,oCAAiB,AAAKA;AAEhD,AACE,OAAA,PAAC+H,0FAAQ,qDAAA,rDAAC1F,4CAAIwF,cAAY,qDAAA,rDAACxF,4CAAIwF;;qQAC1B,WAAK5E,1FAGL,AAACiG,mDAAM7I,lEACP8I,rDACA,qDAAA,rDAACxH,4CAAIyH,5GACL,AAACC,+CAAOvH,jGACR,AAACgF,sBAAOrG;AAPR,AACE,OAACuC,4CACA,AAACiG,+CAAOhG,OAAO,4CAAK6E;;;qQAOzB,WAAK7E,1FAIL,AAACiG,mDAAM7I,lEACP8I,rDACA,qDAAA,rDAACxH,4CAAIyH,5GACL,AAACC,+CAAOvH,jGACR,AAACgF,sBAAOrG;AARR,AACE,OAACuC,4CACA,6GAAA,4FAAA,zMAACsG,8CAAMrG,OAAO,4CAAK6E,+FACXrI;AADR,AACkB,cAAA,PAACsI,0FAAQ,qDAAA,rDAAC1F,4CAAIwF,cAAY,qDAAA,rDAACxF,4CAAIwF;;;;;AAO3D,UAAA,VAACO;;AACD,AAACF,MAAM,AAACY,iBAAOjB;;AACf,IAAA0B,mBAAA,AAAAhE,cAAA,AAAArE,gBAAaN;IAAb4I,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQI;AAAR,AAAA,AACE,qBAAA,pBAAM,AAAWA;;AADnB;AAAA,eAAAP;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAApE,2BAAA,AAAAC,cAAAgE;AAAA,AAAA,GAAAjE;AAAA,AAAA,IAAAiE,uBAAAjE;AAAA,AAAA,GAAA,AAAAE,6BAAA+D;AAAA,IAAAI,wBAAA,AAAAC,sBAAAL;AAAA,AAAA,eAAA,AAAAnD,qBAAAmD;eAAAI;eAAA,AAAAhE,gBAAAgE;eAAA;;;;;;;AAAA,gBAAA,AAAAtD,gBAAAkD,5BAAQO;AAAR,AAAA,AACE,qBAAA,pBAAM,AAAWA;;AADnB;AAAA,eAAA,AAAAD,eAAAN;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAGF,AACE,oBAAM,AAAqBd;AAA3B,AACE,IAAAsB,mBAAA,AAAAxE,cAAA,AAAArE,gBAAaN;IAAboJ,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQJ;AAAR,AAAA,AACE,qBAAA,pBAAM,AAAWA;;AADnB;AAAA,eAAAC;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA5E,2BAAA,AAAAC,cAAAwE;AAAA,AAAA,GAAAzE;AAAA,AAAA,IAAAyE,uBAAAzE;AAAA,AAAA,GAAA,AAAAE,6BAAAuE;AAAA,IAAAJ,wBAAA,AAAAC,sBAAAG;AAAA,AAAA,eAAA,AAAA3D,qBAAA2D;eAAAJ;eAAA,AAAAhE,gBAAAgE;eAAA;;;;;;;AAAA,gBAAA,AAAAtD,gBAAA0D,5BAAQD;AAAR,AAAA,AACE,qBAAA,pBAAM,AAAWA;;AADnB;AAAA,eAAA,AAAAD,eAAAE;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF;;AAGA,oBAAM,AAAUtB;AAAhB,AACE,OAAA,PAACV,0FAAQ,AAAK/H,oCAAiB,AAAKA;;AADtC;;;AAEJ,OAAkB,AAASyI;;AA9D9C,AAAA,0FAAA,g4BAAA,mFAAA,4FAAA,kKAAA,wCAAA,8DAAA,2EAAA,sDAAA,qDAAA,8DAAA,iEAAA,yDAAA,iEAAA,uEAAA,mFAAA,MAAA,IAAA,YAAA,qBAAA,KAAA,mFAAA,4CAAA,YAAA,KAAA,KAAA,KAAA,+DAAA,mFAAA,xqEAgEG,4aAAA,2CAAA,uDAAA,2CAAA,qEAAA,6DAAA,4DAAA,vvBAAC3D,uGAAM,AAACqF,mDAAQ,CAACvB,0CAAAA,4CAAAA,uBAAY,AAACuB,mDAAQ,CAAC5B,2CAAAA,6CAAAA,0VACmB9I,uEAIKoI,2JAC1D7C,wBAAM8C,sGACV,AAACV,+BAAoBC,yvBACd,AAAQJ,+GAOG,CAAA,QAAS,CAAA,OAAQ,cAAA,bAAKa,sDAExC,4CAAKA;;;AApFZ,CAAA,uDAAA,vDAAMN;;AAAN,AA0FA,gCAAA,hCAAM4C,wEAAaC,IAAIC;AAAvB,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,8DAAA,uDAAA,2DAAA,MAAA,yDAAA,OAAA,uDAAA,OAAA,0DAAA,sDAAA,mEAAA,yDAAA,4EAAA,yDAAA,4EAAA,yCAAA,mFAAA,mDAAA,2CAAA,uDAAA,wCAAA,iEAAA,iEAAA,4EAAA,gEAAA,2DAAA,0DAAA,kEAAA,wEAAA,2DAAA,cAAA,OAAA,QAAA,OAAA,qBAAA,sDAAA,qDAAA,yDAAA,iBAAA,mFAAA,8CAAA,2CAAA,uDAAA,2CAAA,gEAAA,qBAmBKD,YACD,6CAAA,mFAAA,hIAACnF,yLAEA,iBAAAC,qBAAA,sDAAAoF;AAAA,AAAA,YAAAlF,kBAAA,KAAA;AAAA,AAAA,IAAAkF,eAAAA;;AAAA,AAAA,IAAAjF,qBAAA,AAAAC,cAAAgF;AAAA,AAAA,GAAAjF;AAAA,AAAA,IAAAiF,eAAAjF;AAAA,AAAA,GAAA,AAAAE,6BAAA+E;AAAA,IAAA9E,kBAgnE8C,AAAAmE,sBAAAW;IAhnE9C7E,qBAAA,AAAAC,gBAAAF;IAAA+E,WAAA,AAAA3E,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAA+E,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA/E;AAAA,IAAAgF,aAAA,AAAA3E,eAAAN,gBAAAgF;cAAA,AAAApI,4CAAAqI,WAAA,IAAA,rEAAOG;aAAP,AAAAxI,4CAAAqI,WAAA,IAAA,pEAAeI;AAAf,AAAA,AAAA,AAAA9E,uBAAAwE,SAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,iEAAA,2DAAA,6DAEsBM,eACnBD;;AAHH,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAAxE,qBAAA,AAAAC,gBAAAsE,UAAA,AAAAG,4CAAA,AAAAvE,qBAAAmE;;AAAA,OAAAtE,qBAAA,AAAAC,gBAAAsE,UAAA;;;AAAA,IAAAI,aAAA,AAAAvE,gBAAAkE;cAAA,AAAAlI,4CAAAuI,WAAA,IAAA,rEAAOC;aAAP,AAAAxI,4CAAAuI,WAAA,IAAA,pEAAeE;AAAf,AAAA,OAAAxE,eAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,iEAAA,2DAAA,4FAAA,AAAAqE,4CAAA,AAAApE,eAAAgE,1FAEsBO,eACnBD;;;AAHH;;;;GAAA,KAAA;;AAAA,AAAA,OAAA1F,mBAAuBmF;;;AAK5B,uCAAA,vCAAMS,sFAAoBC;AAA1B,AACE,YAAA,AAAA9J,RAAMgK,wBAAOvK;IACPwK,iBAAe,AAAA,uGAAiBD;IAChCE,iBAAeJ;IACfK,iBAAe,AAAChC,+CAAOvH,iBAAE,AAACH,4CAAIyH,SAAYgC;IAC1CE,eAAa,CAAA,kBAAA,2EAAA,IAAA,3EACS,kDAAA,lDAACC,uDAAYH,mFAEjBC;IAClBpI,SAAO,eAAA,AAAA/B,fAACiI,+BAAM9I;IACdmL,aAAW,AAACC,qDAAc,AAAA,mGAAeP,OAAO,AAACQ,cAAI,eAAA,AAAAxK,fAACiI,+BAAM9I;IAC5DsL,eAAa,AAACtC,+CAAOvH,iBAAE,AAACH,4CAAIyH,SAAYnG;IACxC2I,aAAW,CAAA,cAAA,yHAAA,IAAA,zHACS,kDAAA,lDAACL,uDAAY,eAAA,AAAArK,fAACiI,+BAAM9I,kGAExBsL;IAChBE,UAAQ,AAACC,kBAAQH,aAAaN;IAC9BU,cAAY,iBAAAC,WAAMH;AAAN,AAAA,QAAAG;KAAA;AAAA,0FAAA,iDAAA,eAAA,mFAAA,+CAAA;;;KAAA;AAAA,0FAAA,iDAAA,mBAAA,mFAAA,+CAAA,uGAAA,1FAE6C,4CAAA,AAAA9K,gBAAMX;;;KAFnD;AAAA,0FAAA,iDAAA,oBAAA,mFAAA,+CAAA,6GAAA,1FAGqD,4CAAA,AAAAW,gBAAMX;;;;AAH3D,MAAA,KAAAkH,MAAA,CAAA,mEAAAuE;;;;IAhBlBf,aAoBoC,iBAAAkB,WAAMN;AAAN,AAAA,QAAAM;KAAA;AAAA,0FACK,kDAAA,lDAACnF,4CAAIkE,4EACL,kDAAA,lDAAClE,4CAAIkE;;;KAFV;AAAA,0FAGK,CAAG,SAAA,AAAAhK,TAACkI,yBAAa7I,gCACd,kDAAA,lDAACyG,4CAAIkE,6EACR,kDAAA,lDAAClE,4CAAIkE;;;KALV;AAAA,0FAMM,kDAAA,lDAAClE,4CAAIkE,4EACL,CAAG,SAAA,AAAAhK,TAACkI,yBAAa7I,gCACd,kDAAA,lDAACyG,4CAAIkE;;;;AARd,MAAA,KAAAzD,MAAA,CAAA,mEAAA0E;;;;mBApBpC,AAAA9J,4CAAA4I,WAAA,IAAA,1EAoBOgB;qBApBP,AAAA5J,4CAAA4I,WAAA,IAAA,5EAoBoBiB;IASdE,kBAAgB,2JAAA,AAAA,mFAAA,iDAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,iEAAA,hnBAAM,mJAAA,nJAACC,6CAAE,kDAAA,lDAACrF,4CAAIkE,gmBAGV,iBAAAoB,WAAM,AAACR,kBAAQG,aAAaC;AAA5B,AAAA,QAAAI;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAA7E,MAAA,CAAA,mEAAA6E;;;aAHJ,mFAAA,iDAAA,uLAAA,mFAAA,pPAQG,CAAA,gFAAA,kEAAA,hFAECL,gEAAmBC,yKAGpB,iBAAAK,WAAM,AAACT,kBAAQG,aAAaC;AAA5B,AAAA,QAAAK;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAA9E,MAAA,CAAA,mEAAA8E;;;aAbH;IAiBhBC,YAAU,iBAAAC,WAAMZ;AAAN,AAAA,QAAAY;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAhF,MAAA,CAAA,mEAAAgF;;;;gBA9ChB,mFAAA,iDAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,iEAAA,2FAAA,mFAAA,iDAAA,gCAAA,mFAAA,qEAAA,mFAAA,78BAkDMC,4iBAC+CF,2KAEpCZ,sJACAN,wJACAS;IACXY,eAAa,AAAClB,qDAAcN,eAAeC;IAC3CwB,eACA;AAAA,AACE,AAAC1D,mDAAM7I,4BACA,WAAKwM;AAAL,AACE,IAAAC,mBAAA,AAAAvH,cAA0CsH;IAA1CE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;wBAAA,AAAA5K,4CAAA6K,iBAAA,IAAA,rFAASI;IAATH,mBAAA,AAAA9K,4CAAA6K,iBAAA,IAAA;oBAAA,AAAA7K,4CAAA8K,iBAAA,IAAA,jFAAsBI;sBAAtB,AAAAlL,4CAAA8K,iBAAA,IAAA,nFAA8B1J;AAA9B,AAAA,AACE,iCAAA,hCAAM,AAAA,AAAI8J;;AAEV,oCAAA,nCAAM,AAAA,AAAA,AAAIA;;AAHZ;AAAA,eAAAT;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA3H,2BAAA,AAAAC,cAAAuH;AAAA,AAAA,GAAAxH;AAAA,AAAA,IAAAwH,uBAAAxH;AAAA,AAAA,GAAA,AAAAE,6BAAAsH;AAAA,IAAAnD,wBAAA,AAAAC,sBAAAkD;AAAA,AAAA,eAAA,AAAA1G,qBAAA0G;eAAAnD;eAAA,AAAAhE,gBAAAgE;eAAA;;;;;;;AAAA,IAAAyD,mBAAA,AAAA/G,gBAAAyG;wBAAA,AAAAzK,4CAAA+K,iBAAA,IAAA,rFAASE;IAATD,mBAAA,AAAAhL,4CAAA+K,iBAAA,IAAA;oBAAA,AAAA/K,4CAAAgL,iBAAA,IAAA,jFAAsBE;sBAAtB,AAAAlL,4CAAAgL,iBAAA,IAAA,nFAA8B5J;AAA9B,AAAA,AACE,iCAAA,hCAAM,AAAA,AAAI8J;;AAEV,oCAAA,nCAAM,AAAA,AAAA,AAAIA;;AAHZ;AAAA,eAAA,AAAA1D,eAAAiD;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAIA,kFAAA,WAAAU,7FAACtE,mDAAM5I;AAAP,AAAqB,oDAAAkN,7CAACtI,8DAAO2H;;;AAL/B;;;AAOP,kDAAA,lDAAC/F,sBAAOrG;;AACR,AAACqG,sBAAOvG,4BAAU,AAACT;;AACnB,OAACgH,sBAAOnG,6BACA,EAAI,mJAAA,nJAAC0L,6CAAE,kDAAA,lDAACrF,4CAAIkE,gEACV;AACE,AAAChC,mDAAM5I,+BACA,WAAKuM;AAAL,AACE,IAAAY,mBAAA,AAAAlI,cAAyCsH;IAAzCa,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;wBAAA,AAAAvL,4CAAAwL,iBAAA,IAAA,rFAASP;IAATQ,mBAAA,AAAAzL,4CAAAwL,iBAAA,IAAA;oBAAA,AAAAxL,4CAAAyL,iBAAA,IAAA,jFAAsBP;qBAAtB,AAAAlL,4CAAAyL,iBAAA,IAAA,lFAA8BG;AAA9B,AAAA,AACE,iCAAA,hCAAM,AAAA,AAAIV;;AACV,CAACU,+CAAAA,iDAAAA;;AACD,oCAAA,nCAAM,AAAA,AAAA,AAAIV;;AAHZ;AAAA,eAAAE;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAtI,2BAAA,AAAAC,cAAAkI;AAAA,AAAA,GAAAnI;AAAA,AAAA,IAAAmI,uBAAAnI;AAAA,AAAA,GAAA,AAAAE,6BAAAiI;AAAA,IAAA9D,wBAAA,AAAAC,sBAAA6D;AAAA,AAAA,eAAA,AAAArH,qBAAAqH;eAAA9D;eAAA,AAAAhE,gBAAAgE;eAAA;;;;;;;AAAA,IAAAoE,mBAAA,AAAA1H,gBAAAoH;wBAAA,AAAApL,4CAAA0L,iBAAA,IAAA,rFAAST;IAATU,mBAAA,AAAA3L,4CAAA0L,iBAAA,IAAA;oBAAA,AAAA1L,4CAAA2L,iBAAA,IAAA,jFAAsBT;qBAAtB,AAAAlL,4CAAA2L,iBAAA,IAAA,lFAA8BC;AAA9B,AAAA,AACE,iCAAA,hCAAM,AAAA,AAAIV;;AACV,CAACU,+CAAAA,iDAAAA;;AACD,oCAAA,nCAAM,AAAA,AAAA,AAAIV;;AAHZ;AAAA,eAAA,AAAA1D,eAAA4D;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF;;;AAFT,kDAAA,mDAAA,IAAA,qEAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,wBAAA,yEAAA,iFAAA,SAAA,SAAA,SAAA,SAAA,SAAA,wBAAA,qEAAA,IAAA,yEAAA;;wOAaIvC,9CACA,oDAAA,pDAAC5B,6HAAsBqD,3KACvB,yLAAA,zLAACrD,8PAAoBkC,7SACrB,yTAAA,zTAAC0C,4WAAaC,1ZACd,yaAAA,zaAAC7E,8eAAoB2C,5hBACrB,0iBAAA,1iBAAC3C,mnBAAsB4C;;AAzF7C,AA2FE,OAACpF,sBACApG,4BACA,2JAAA,6FAAA,2CAAA,jSAAI,mJAAA,nJAAC2L,6CAAE,kDAAA,lDAACrF,4CAAIkE,mJACTwB,kEAEC;AAAA,AAAO,yDAAA,mGAAA,2CAAA,aAAA,7MAAC5F,sBACApG,+GACC0L;AAFF,AAII,AAAI,AAACQ;;AACD,yDAAA,lDAAC9F,sBAAOpG;;mBAR3B,6FAAA,2CAAA,WAAA,hEAUGgM;AAVH,AAYK,AAAI,AAACE;;AACD,yDAAA,lDAAC9F,sBAAOpG;;;AAkHtB,mCAAA,mFAAA,iDAAA,mFAAA,iDAAA,kBAAA,mFAAA,8CAAA,yaAAA,mFAAA,iDAAA,6BAAA,mFAAA,8CAAA,zoCAAK0N;AAOL,+BAAA,wDAAAC,vFAAME,sEAAYC,QAAQC;AAA1B,AAAA,IAAAH,aAAAD;QAAA,AAAAhM,4CAAAiM,WAAA,IAAA,/DAAoC9H;WAApC,AAAAnE,4CAAAiM,WAAA,IAAA,lEAAsCtD;AAAtC,AACE,oDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,+DAAA,MAAA,yDAAA,IAAA,yDAAA,wDAAA,nqBAAC9F,ouBAIgC,4DAAA,2CAAA,rGAAM,AAACmH,6CAAE7F,EAAEiI,WACT,2BAAA,MAAA,fAAID,uDAGjC,AAAC7M,4CAAI,WAAK+M;AAAL,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,YAAA,2DAAA,oBAEY,4CAAKA;IACtB1D;;AAER,8BAAA,9BAAM2D,oEAAWC;AAAjB,AACE,oDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,iDAAA,jeAAC1J,6fAEA,AAACvD,4CAAI,WAAK6E;AAAL,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,wDAAA,sEAAA,KAAA,qEAAA,IAAA,uDAAA,QAAA,mEAAA,yDAAA,0DAAA,sDAAA,4EAAA,yEACsFA;IAC3FoI;;AAEH,kCAAA,lCAAMC;AAAN,AACE,IAAMC,eAAa,gDAAA,hDAACtO;IACduO,iBAAe,6CAAA,7CAAC7O;IAChB8O,YAAU,6CAAA,7CAAC9O;IACX+O,OAAK,gDAAA,hDAACzO;IACN0O,OAAK,gDAAA,hDAAC1O;AAJZ,AAKE;AAAA,AACE,YAAA,AAAAU,RAAMgK,wBAAOvK;IACPwK,iBAAe,AAACgE,6CAAK,AAAA,uGAAiBjE;IACtCkE,sBAAoB,AAACC,oDAAYC,iBAAO,AAACC,mCAAcpE;IACvDqE,WAAS,AAAC7J,gBAAMyJ;AAHtB,AAAA,0FAAA,mDAAA,iBAAA,sIAAA,o5BAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,yDAAA,IAAA,4EAAA,n9CAMIT,4BAAUxD,kDAEX,6CAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,8DAAA,oDAAA,wEAAA,1mBAACjG,qrBAIK,AAACvD,4CAAI,6EAAA,AAAAT,sBAAA,AAAAA,nGAACU,gDAAQ2M,6CAAYU,sBAAMH,gBAChCM,6mBAIL,kBAAA,AAAAlO,uBAAA,mFAAA,yDAAA,2CAAA,6DAAA,3PAAK+N;AAAL,AACuB,AAAI,kDAAA,lDAACnI,sBAAOpG;;AACR,OAACqK,qCAAmB,AAACjC,iBAAO,gEAAA,AAAA5H,hEAACmB,4CAAI+M,oCAAqBF;WAFjF,mBAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAIuB,GAAM,CAAA,AAAAhO,yBAAA,TAAOgO;AAAb,AACE,GAAI,6CAAA,7CAAC7C,iDAAI,AAAA,iFAAOnB;AACd,AACE,AAACpE,sBAAOoI,KAAK,YAAA,XAAKM;;AAClB,AAAC1I,sBAAOgI,aAAa,YAAA,XAAKU;;AAC1B,kCAAA,3BAAC1I,sBAAOmI;;AACV,AACE,AAACnI,sBAAOoI,KAAK,AAACO,mBAASD;;AACvB,OAAC1I,sBACAiI,eACA,AAACW,YACA;AAAA,AACE,oBAAA,AAAAxO,gBAAK8N;AACH,GAAI,6CAAA,AAAA9N,sBAAA,AAAAA,nEAACmL,6DAAG6C,sBAAMJ;AACZ,AAAI,cAAA,AAAA5N,dAACyO,8BAAkBZ;;AACnB,kCAAA,3BAACjI,sBAAOmI;;AACZ,OAAC/F,mDAAM4F,aAAaX;;;AACtB,GAAI,6CAAA,AAAAjN,7CAACmL,6DAAGyC,cAAa,YAAA,XAAKU;AACxB,AAAI,gCAAA,hCAAC1I,sBAAOkI;;AACR,0CAAA,nCAAClI,sBAAOgI;;AACZ,OAAC5F,mDAAM4F,aAAaX;;;GAV3B;;;AAVP;;WAJvB;;;AA4BV,+BAAA,/BAAMyB;AAAN,AACE,yDAAA,mFAAA,rIAAC9I,sBACApG,kMACEmO;;AAEL,+BAAA,/BAAMgB;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,2DAAA,MAAA,0DAAA,sDAAA,4EAAA,oEAAA,4EAAA,wBAAA,uDAAA,OAAA,gEAAA,KAAA,8DAAA,6EAAA,mFAAA,mDAAA,mFAAA,yDAAA,2CAAA,uDAAA,2CAAA,sEAAA,OAAA,gEAAA,IAAA,0DAAA,sDAAA,4EAAA,yDAAA,mEAAA,yDAAA,qEAAA,IAAA,yDAAA,wDAAA,2DAAA,YAAA,6DAAA;AAAA,AAiByB,yDAAA,oHAAA,2CAAA,jNAAC/I,sBAAOpG,+GAAW0N,uFAA2B;AAAA,AAAO,yDAAA,lDAACtH,sBAAOpG;;WAjBtF,mFAAA,+CAAA,oBAAA,mFAAA,gDAAA,2CAAA,uDAAA,2CAAA,gEAAA,IAAA,0DAAA,sDAAA,4EAAA,yDAAA,mEAAA,iEAAA,qDAAA,sBAAA,0BAAA,mFAAA,mDAAA,mFAAA,iDAAA,+LAAA,mFAAA,mDAAA,kBAAA,iVAAA,mFAAA,iDAAA,uJAAA,qBAAA,mFAAA,mDAAA,mFAAA,iDAAA,uLAAA,mFAAA,8CAAA,aAAA,AAAAQ,qDAAA,mFAAA,yDAAA,2CAAA,kGAAA,l2DA0B4B,4CAAA,AAAAA,8CAAA,1FAAC8F,4DAAKrG,2VACLgO,4BAAU,AAACQ,6CAAK,4CAAA,AAAAjO,8CAAA,1FAAC8F,4DAAKrG,sQACjC,4CAAA,AAAAO,8CAAA,1FAAC8F,4DAAKrG,gYAEA,4CAAA,AAAAO,8CAAA,1FAAC8F,4DAAKrG,0QACRF,yRACEmP;;AAGxB,gCAAA,hCAAME;AAAN,AACE,IAAMnL,OAAK,gDAAA,hDAACC;IACNmL,aAAW,oCAAA,pCAACC;AAAD,AAAU,OAAQ,AAASrL;;AAD5C,AAAA,0FAAA,oFAAA,2CAAA,4DAAA,aAAA,mFAAA,sDAAA,mFAAA,+DAAA,2CAAA,oEAAA,8DAAA,mFAAA,qBAAA,YAAA,8DAAA,mFAAA,KAAA,MAAA,aAAA,uDAAA,qBAAA,mFAAA,+DAAA,2CAAA,oEAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,8DAAA,mFAAA,oBAAA,YAAA,uDAAA,1lDAEME,whBAEmB,AAASF,gKACJ,WAAA,VAAGI,ugBAGRgL,uUAEK,WAAA,VAAGhL;;AAGnC,6BAAA,7BAAMoL;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,qEAAA,qDAAA,wEAAA,yDAAA,+DAAA,IAAA,yDAAA,uBAMG,iBAAA7K,qBAAA,AAAApE,gBAAuBR;AAAvB,AAAA,oBAAA4E;AAAA,AAAA,IAAA8K,aAAA9K;UAAA,AAAAjD,4CAAA+N,WAAA,IAAA,jEAAY/F;WAAZ,AAAAhI,4CAAA+N,WAAA,IAAA,lEAAgB9F;AAAhB,AAAA,0FACGF,8BAAYC,IAAIC;;AADnB;;KANH,wHAAA,mFAAA,oFAAA,2CAAA,6lCAAA,uDAAA,2CAAA,0DAAA,sDAAA,+DAAA,oBAAA,oFAAA,+FAAA,2CAAA,0DAAA,2CAAA,8DAAA,mFAAA,IAAA,KAAA,YAAA,sDAAA,KAAA,kDAAA,aAAA,sEAAA,aAAA,+KAAA,mFAAA,2EAAA,2CAAA,+DAAA,IAAA,uDAAA,UAAA,sEAAA,0BAAA,mFAAA,qEAAA,2CAAA,+DAAA,oBAAA,mFAAA,iEAAA,2CAAA,8DAAA,mFAAA,IAAA,IAAA,aAAA,+DAAA,IAAA,uDAAA,wBAAA,mFAAA,2EAAA,AAAApJ,qDAAA,mFAAA,uFAAA,mFAAA,uEAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,aAAA,8DAAA,oGAAA,IAAA,YAAA,mDAAA,WAAA+O,lnJAQIJ,uKACGhL,4IACQ,sDAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,wDAAA,0DAAA,sDAAA,+DAAA,IAAA,mEAAA,yDAAA,4EAAA,yEAAA,mFAAA,kDAAA,ngCAACwL,y8CAQRC,soBAMF,AAAClJ,+BAAoBmJ,23CASjB7J,0CAASnG,yKACTuP,oiBAEuB,WAAA,VAAG/K;AApCpC,AAqC4B,6GAAAkL,tGAAC/G,mDAAMtI,oCAAkB4P;GArCrD,iEAAA,MAAA,+DAAA,IAAA,4DAAA,MAAA,uDAAA,IAAA,yDAAA,oBAAA,mFAAA,sDAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,KAAA,MAAA,YAAA,iEAAA,oBAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,iEAAA,oBAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,iEAAA,oBAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,KAAA,MAAA,YAAA,iEAAA,oBAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,iEAAA,oBAAA,mFAAA,8EAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,iEAAA,4BAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,KAAA,KAAA,aAAA,mDAAA,WAAAN,98FA4CW1I,ycAEAA,wcAEAA,wcAEAA,ycAEAA,wcAEAA;AAtDX,AAyDmB,yDAAA0I,lDAACpJ,sBAAO7G;WAzD3B,mFAAA,kEAAA,2CAAA,qDAAA,mFAAA,IAAA,KAAA,4BAAA,mFAAA,sFAAA,2CAAA,uDAAA,aAAA,oEAAA,KAAA,0DAAA,4BAAA,mFAAA,oDAAA,2CAAA,8DAAA,mFAAA,IAAA,KAAA,YAAA,8DAAA,oGAAA,IAAA,oBAAA,mFAAA,wEAAA,2CAAA,qDAAA,mFAAA,KAAA,6BAAA,mFAAA,qFAAA,2CAAA,uDAAA,+BAAA,0KAAA,2CAAA,8DAAA,mFAAA,IAAA,MAAA,YAAA,0DAAA,IAAA,uDAAA,KAAA,qDAAA,KAAA,iDAAA,nyCA+DwB,WAAA,VAAG8E,oxBAGrB,AAACqC,+BAAoBqJ;;AAO3B,+BAAA,/BAAMC;AAAN,AAAA,0FAAA,iDACOP","names":["tableground.views/rotate-fn","mesh-ref","new-r","tableground.views/hot-plane","js/shadow.js.shim.module$three.Plane","js/shadow.js.shim.module$three.Vector3","tableground.views/roll-pot","cljs.core/rand-nth","tableground.views/intersect-point","tableground.views/play-area","cljs.core.atom","tableground.views/box-geom","js/shadow.js.shim.module$three.BoxGeometry","tableground.views/bid-boxes","tableground.views/hidden-boxes","tableground.views/pot-value","reagent.core.atom","tableground.views/bid-total","tableground.views/popup-msg","tableground.views/game-state","tableground.views/hover-effect-objs","js/tableground","js/tableground.views","js/tableground.views.grid-offsets","tableground.views/grid-offsets","tableground.views/compute-play-area-bounds","cljs.core/deref","bounds","get-xz","p1__49184#","p1__49185#","cljs.core.juxt","geom","p1__49186#","p1__49187#","cljs.core.map","cljs.core.partial","cljs.core/map","cljs.core/+","cljs.core.repeat","tableground.views/play-area-intersect?","x","z","vec__49188","vec__49191","cljs.core.nth","vec__49194","min-x","min-z","max-x","max-z","tableground.views/compute-play-area-center","vec__49197","vec__49200","vec__49203","cljs.core/*","tableground.views/enforce-and-return-played","played","cljs.core.doall","p__49206","p__49207","vec__49208","vec__49211","vec__49214","_face-text","_reset-fn","p__49217","p__49218","vec__49219","vec__49222","dx","dz","ox","oz","tableground.views/dot-geom","js/shadow.js.shim.module$three.CylinderGeometry","tableground.views/dot-mat","js/shadow.js.shim.module$three.MeshPhysicalMaterial","cljs.core/clj->js","tableground.views/pot-box-ref","tableground.views/dice-rotations","tableground.views/coin","props","gltf","js/shadow.js.shim.module$$react_three$drei.useGLTF","js/shadow.js.shim.module$react.Suspense","cljs.core.merge","Math/PI","tableground.views/coins","n","cljs.core.into","iter__5523__auto__","s__49226","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__49228","cljs.core/chunk-buffer","i__49227","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49225","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","i","cljs.core.range","tableground.views/pot-box","face-text","js/shadow.js.shim.module$react.useRef","_","cljs.core/reset!","rot","cljs.core.get","font-loader","js/shadow.js.shim.module$$react_three$fiber.useLoader","js/shadow.js.shim.module$three$examples$jsm$loaders$FontLoader.FontLoader","reagent.core/adapt-react-class","js/shadow.js.shim.module$$react_three$drei.Text3D","var_args","G__49230","tableground.views/player-box","js/Error","p__49231","map__49232","cljs.core/--destructure-map","position","face-value","set-xz","p__49233","vec__49234","set-y","y","set-hover","hovered?","js/document","bind-hover","js/shadow.js.shim.module$$use_gesture$react.useHover","e","and__5043__auto__","cljs.core/not","bind-drag","js/shadow.js.shim.module$$use_gesture$react.useDrag","cljs.core/second","evt","ray","cljs.core.dissoc","cljs.core.swap_BANG_","cljs.core/keys","js/parseInt","cljs.core.reduce","cljs.core.assoc","seq__49237","chunk__49238","count__49239","i__49240","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","obj","seq__49241","chunk__49242","count__49243","i__49244","cljs.core.js__GT_clj","tableground.views/popup-panel","msg","btns","s__49246","b__49248","i__49247","vec__49249","iter__49245","vec__49252","btn-txt","btn-fn","tableground.views/play-opponent-turn","move","vec__49256","state","opponent-boxes","opponent-plays","opponent-total","opponent-msg","clojure.string.join","player-rem","clojure.set.difference","cljs.core/set","player-total","player-msg","verdict","cljs.core/compare","verdict-msg","G__49259","player-score","opponent-score","G__49260","game-result-msg","cljs.core._EQ_","G__49261","G__49262","emoji-msg","G__49263","final-msg","opponent-rem","popup-effect","boxes","seq__49264","chunk__49265","count__49266","i__49267","vec__49280","vec__49283","vec__49286","vec__49289","_face-value","box-ref","p1__49255#","seq__49292","chunk__49293","count__49294","i__49295","vec__49308","vec__49311","vec__49314","vec__49317","reset-fn","cljs.core.update","cljs.core/inc","tableground.views/tutorial-panel","p__49321","vec__49322","tableground.views/move-combo","is-done","selected","item","tableground.views/show-hand","hand","tableground.views/roll-opp-move","spin-counter","interval-index","once-thru","done","roll","cljs.core.sort","numbered-opp-combos","cljs.core.map_indexed","cljs.core/vector","clojure.math.combinatorics/subsets","n-combos","cljs.core/rand-int","js/setInterval","js/clearInterval","tableground.views/show-moves","tableground.views/text-panel","tableground.views/wood-tables","alt-object","js/shadow.js.shim.module$react.useMemo","p1__49325#","p1__49326#","tableground.views/panel-fn","vec__49327","reagent.core.as_element","js/shadow.js.shim.module$$react_three$fiber.Canvas","js/shadow.js.shim.module$$react_three$drei.AdaptiveDpr","cljs.core/conj","js/shadow.js.shim.module$$react_three$drei.ContactShadows","tableground.views/main-panel"],"sourcesContent":["(ns tableground.views\n  (:require\n   [\"three\" :as three]\n   ; [\"three/addons/loaders/FontLoader\" :refer [FontLoader]]\n   [\"three/examples/jsm/loaders/FontLoader\" :refer [FontLoader]]\n   [\"@react-three/fiber\" :as fib :refer [useFrame]]\n   [\"@react-three/drei\" :as drei]\n   [\"react\" :as jsrn :refer [useRef useState useEffect useMemo Suspense]]\n   [reagent.core :as r]\n   [clojure.math.combinatorics :as combo]\n   [clojure.set :as st]\n   [clojure.string :as s]\n   [\"@use-gesture/react\" :refer [useDrag useHover]]))\n\n(set! *warn-on-infer* true)\n\n;; NOTES:\n;; The most efficient way to update items is by calling setter methods\n;; However, it's easier to reason about state when we're more declarative\n;; So: we will tend to update some intermediate state, then use this state\n;; to call appropriate setter methods\n\n(defn rotate-fn [mesh-ref]\n  (let [new-r (-> mesh-ref .-current .-rotation .-x (+ 0.005))]\n    (set! (-> mesh-ref .-current .-rotation .-x) new-r)))\n\n; (defonce floor-plane (three/Plane. (three/Vector3. 0 1.5 0) 0))\n; (defonce box-geom (three/CylinderGeometry. 0.5 0.5 1 16))\n\n(def hot-plane (three/Plane. (three/Vector3. 0 1 0) 0.3))\n(defn roll-pot [] (rand-nth [\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"]))\n(def intersect-point (three/Vector3.))\n(def play-area (atom nil))\n(def box-geom (three/BoxGeometry. 1 1 1))\n(def bid-boxes (atom nil)) ;; {face-value [ref reset-fn]}\n(def hidden-boxes (atom nil))\n(def pot-value (r/atom (roll-pot)))\n(def bid-total (r/atom 0))\n(def popup-msg (r/atom nil)) ;; [msg-hiccup {button-text button-fn}]\n(def game-state (r/atom {:turn 1\n                         :player-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :opponent-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :player-score 0\n                         :opponent-score 0}))\n(def hover-effect-objs (atom nil))\n\n(defonce grid-offsets [[-1.2 -0.6]\n                       [0 -0.6]\n                       [1.2 -0.6]\n                       [-1.2 0.6]\n                       [0 0.6]\n                       [1.2 0.6]])\n\n(defn compute-play-area-bounds []\n  ; returns [[min-x min-z] [max-x max-z]]\n  (let [bounds @play-area\n        get-xz (juxt #(.-x %) #(.-z %))\n        geom ^three/BufferGeometry (.-geometry bounds)]\n    (.computeBoundingBox geom)\n    (->> (.-boundingBox geom)\n         ((juxt #(.-min %) #(.-max %)))\n         (map get-xz)\n         (map (partial map +) (repeat (get-xz (.-position bounds)))))))\n\n(defn play-area-intersect? [x z]\n  (let [[[min-x min-z] [max-x max-z]] (compute-play-area-bounds)]\n    (and (< min-x x max-x) (< min-z z max-z))))\n\n(defn compute-play-area-center []\n  (let [[[min-x min-z] [max-x max-z]] (compute-play-area-bounds)]\n    (map (partial * 0.5) [(+ min-x max-x) (+ min-z max-z)])))\n\n(defn enforce-and-return-played [played]\n  (doall\n   (map\n    (fn [[_face-text [mesh-ref _reset-fn]] [x z]]\n      (set! (-> mesh-ref .-current .-position .-x) x)\n      (set! (-> mesh-ref .-current .-position .-z) z))\n    played\n    (map (fn [[dx dz] [ox oz]] [(+ dx ox) (+ dz oz)])\n         grid-offsets\n         (repeat (compute-play-area-center)))))\n  played)\n\n(def dot-geom\n  (three/CylinderGeometry. 0.1 0.1 0.02 16))\n(def dot-mat (three/MeshPhysicalMaterial. (clj->js {:color \"grey\"})))\n\n(def pot-box-ref (atom nil))\n(def dice-rotations {\"1\" [0 0 0]\n                     \"2\" [-1.57 0 0]\n                     \"3\" [0 0 1.57]\n                     \"4\" [0 0 -1.57]\n                     \"5\" [1.57 0 0]\n                     \"6\" [-3.14 0 0]})\n\n(defn coin [props]\n  (let [gltf (drei/useGLTF \"/assets/coin/scene.gltf\")]\n    [:> Suspense {:fallback nil}\n     [:group (merge {:dispose nil}\n                    props)\n      [:mesh {:geometry (-> gltf\n                            (.-nodes)\n                            (.-Cylinder015_Gold_0)\n                            (.-geometry))\n              :material (.-Gold (.-materials gltf))\n              :rotation [(/ Math/PI 2) 0 Math/PI]\n              :scale 2.5}]]]))\n\n(defn coins [n]\n  (into\n   [:group]\n   (for [i (range n)]\n     [:f> coin {:position [0 (* 0.15 i) 0]}])))\n\n(defn pot-box\n  ([face-text]\n   (let [mesh-ref (useRef)\n         _ (reset! pot-box-ref mesh-ref)\n         rot (get dice-rotations face-text)\n         font-loader (fib/useLoader FontLoader \"/marcellus.json\")]\n     [:group\n      [:mesh {:ref mesh-ref\n              :geometry box-geom\n              ; :castShadow true\n              ; :receiveShadow true\n              :position [0.5 0 -3.5]\n              ; :position [-2 2.2 3.5]\n              :rotation rot}\n       [:group ;; 1\n        [:mesh {:position [0 0.5 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 2\n        [:mesh {:position [-0.25 -0.25 0.5]\n                :rotation [-1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 0.25 0.5]\n                :rotation [-1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 3\n        [:mesh {:position [0.5 0 0]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.5 0.25 0.25]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.5 -0.25 -0.25]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 4\n        [:mesh {:position [-0.5 0.25 -0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 -0.25 -0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 -0.25 0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 0.25 0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 5\n        [:mesh {:position [0 0 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 6\n        [:mesh {:position [-0.25 -0.5 -0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.5 0]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.5 0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 -0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 0]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:meshPhysicalMaterial {:color \"#333333\"}]]\n      [:mesh ;; text display\n       {:position [-0.8 0 -3.8]\n        :rotation [-1.10 0 0]}\n       [:BoxGeometry {:args [1 1 0.1]}]\n       [:meshPhysicalMaterial\n        {:color \"#333333\"}]\n       [(r/adapt-react-class drei/Text3D)\n        {:font (.-data font-loader)\n         :height 0.05\n         :size 0.5\n         :position [-0.2 -0.25 0.1]\n         :rotation [0 0 0]}\n        face-text\n        [:meshPhysicalMaterial\n         {:color \"black\"\n          :emissive \"gold\"}]]]])))\n\n(defn player-box\n  ([] [:f> player-box {:position [0 0 0] :face-value 0}])\n  ([{:keys [position face-value]}]\n   (let [mesh-ref (useRef)\n         font-loader (fib/useLoader FontLoader \"/marcellus.json\")\n         set-xz (fn [[x z]]\n                  (set! (-> mesh-ref .-current .-position .-x) x)\n                  (set! (-> mesh-ref .-current .-position .-z) z))\n         set-y (fn [y] (set! (-> mesh-ref .-current .-position .-y) y))\n         set-hover (fn [hovered?]\n                     (set! (-> js/document .-body .-style .-cursor)\n                           (if hovered? \"pointer\" \"\")))\n         bind-hover (useHover\n                     (fn [e]\n                       (cond\n                         (and ^js/boolean (.-last e)\n                              (not ^js/boolean (.-down e))) (set-hover false)\n                         ^js/boolean (.-first e) (set-hover true))))\n         bind-drag (useDrag\n                    (fn [e]\n                      (when ^js/boolean (.-first e)\n                         ;; save start position\n                        (set-y (+ (second position) 0.3)))\n                       ;; set intersect-point\n                      (let [evt ^jsrn/SyntheticEvent (.-event e)\n                            ray ^three/Ray (.-ray evt)]\n                        (.intersectPlane ray hot-plane intersect-point))\n                      (if ^js/boolean (.-last e)\n                         ;; trying to place\n                        (do\n                          (if-not\n                           (play-area-intersect? (.-x intersect-point) (.-z intersect-point))\n                             ;; reset box\n                            (do\n                              (set-xz [(nth position 0) (nth position 2)])\n                              (->> (fn [played]\n                                     (enforce-and-return-played\n                                      (dissoc played (str face-value))))\n                                   (swap! bid-boxes)\n                                   keys\n                                   (map js/parseInt)\n                                   (reduce +)\n                                   (reset! bid-total)))\n                             ;; play box\n                            (->> (fn [played]\n                                   (enforce-and-return-played\n                                    (assoc played (str face-value)\n                                           [mesh-ref #(set-xz [(nth position 0) (nth position 2)])])))\n                                 (swap! bid-boxes)\n                                 keys\n                                 (map js/parseInt)\n                                 (reduce +)\n                                 (reset! bid-total)))\n                          ;; put the object down / disable drag effects\n                          (set-hover false)\n                          (set-y (second position))\n                          (doseq [obj @hover-effect-objs]\n                            (set! (.-visible obj) false)))\n                         ;; normal dragging\n                        (do\n                          (when ^js/boolean (.-first e)\n                            (doseq [obj @hover-effect-objs]\n                              (set! (.-visible obj) true)))\n                          (when (.-active e)\n                            (set-xz [(.-x intersect-point) (.-z intersect-point)]))))\n                      (.stopPropagation (.-event e))))]\n     [:mesh\n      (merge (js->clj (bind-drag)) (js->clj (bind-hover)) {:style {:touch-action :none}\n                                                           :ref mesh-ref\n                                                           ; :geometry box-geom\n                                                           ; :castShadow true\n                                                           ; :receiveShadow true\n                                                           :position position})\n      [:f> coins face-value]\n      [(r/adapt-react-class drei/Text3D)\n       {:font (.-data font-loader)\n        :castShadow true\n        :bevel-enabled true\n        :bevel-size 0.02\n        :bevel-thickness 0.1\n        :height 0.08\n        :size 0.45\n        :position [-0.17 (+ -0.05 (* 0.15 (dec face-value))) 0.2]\n        :rotation [-1.57 0 0]}\n       (str face-value)\n       [:meshNormalMaterial]\n       #_[:meshPhysicalMaterial\n          {:color \"gold\"\n           :emissive \"black\"}]]])))\n\n(defn popup-panel [msg btns]\n  [:div {:style {:position :fixed\n                 :z-index 101\n                 :height \"100%\"\n                 :width \"100%\"\n                 :display :flex\n                 :align-items :center\n                 :justify-content :center\n                 :background-color \"rgba(200,200,200, 0.5)\"}}\n   [:div {:style {:background-color \"white\"\n                  :display :flex\n                  :flex-direction :column\n                  :max-width \"60ch\"\n                  :max-height \"40ch\"\n                  :overflow-y :auto\n                  :margin \"24px\"\n                  :padding \"0px 24px 24px 24px\"\n                  :box-shadow \"3px 4px 8px\"}}\n    [:p {:style {:font-size 14}}\n     msg]\n    (into\n     [:<>]\n     (for [[btn-txt btn-fn] btns]\n       [:button {:style {:align-self :end}\n                 :on-click btn-fn}\n        btn-txt]))]])\n\n(defn play-opponent-turn [move]\n  (let [state @game-state\n        opponent-boxes (:opponent-boxes state)\n        opponent-plays move\n        opponent-total (reduce + (map js/parseInt opponent-plays))\n        opponent-msg (str \"Opponent plays \"\n                          \"[\" (s/join \", \" opponent-plays) \"]\"\n                          \" for a total of \"\n                          opponent-total)\n        played (keys @bid-boxes)\n        player-rem (st/difference (:player-boxes state) (set (keys @bid-boxes)))\n        player-total (reduce + (map js/parseInt played))\n        player-msg (str \"You played \"\n                        \"[\" (s/join \", \" (keys @bid-boxes)) \"]\"\n                        \" for a total of \"\n                        player-total)\n        verdict (compare player-total opponent-total)\n        verdict-msg (case verdict\n                      0 [:<> \"It's a tie. \" [:b \"Scores are unchanged.\"]]\n                      1 [:<> \"You win the bid.\" [:b \" You gain \" (str @pot-value) \" points\"]]\n                      -1 [:<> \"You lose the bid.\" [:b \" Opponent gains \" (str @pot-value) \" points\"]])\n        [player-score opponent-score] (case verdict\n                                        0 [(get state :player-score)\n                                           (get state :opponent-score)]\n                                        1 [(+ (js/parseInt @pot-value)\n                                              (get state :player-score))\n                                           (get state :opponent-score)]\n                                        -1 [(get state :player-score)\n                                            (+ (js/parseInt @pot-value)\n                                               (get state :opponent-score))])\n        game-result-msg (when (= (get state :turn) 3)\n                          [:<>\n                           [:h1 {:style {:text-align :center}}\n                            (case (compare player-score opponent-score)\n                              0 \"\u2696\ufe0f \"\n                              1 \"\ud83c\udfc6\"\n                              -1 \"\ud83e\udd48\")]\n                           [:h3 \"Game result\"]\n                           (str\n                            \"The final score is \"\n                            player-score \" - \" opponent-score\n                            \".\")\n                           [:br]\n                           (case (compare player-score opponent-score)\n                             0 \"The game ends in a tie.\"\n                             1 \"You're the winner!\"\n                             -1 \"You were runner-up.\")])\n        emoji-msg (case verdict\n                    1 \"\u2705\"\n                    0 \"\u26aa\"\n                    -1 \"\ud83d\udeab\")\n        final-msg [:<>\n                   [:h1 {:style {:text-align :center}} emoji-msg]\n                   [:h3 \"Bid result\"]\n                   player-msg [:br]\n                   opponent-msg [:br]\n                   verdict-msg]\n        opponent-rem (st/difference opponent-boxes opponent-plays)\n        popup-effect\n        (fn []\n          (swap! bid-boxes\n                 (fn [boxes]\n                   (doseq [[_face-value [box-ref _reset-fn]] boxes]\n                     (set! (-> box-ref .-current .-visible) false)\n                     ;; this is our lazy way of preventing it from being interacted with\n                     (set! (-> box-ref .-current .-position .-y) 15))\n                   (swap! hidden-boxes #(into % boxes))\n                   nil))\n          (reset! bid-total 0)\n          (reset! pot-value (roll-pot))\n          (reset! game-state\n                  (if (= (get state :turn) 3)\n                    (do\n                      (swap! hidden-boxes\n                             (fn [boxes]\n                               (doseq [[_face-value [box-ref reset-fn]] boxes]\n                                 (set! (-> box-ref .-current .-visible) true)\n                                 (reset-fn)\n                                 (set! (-> box-ref .-current .-position .-y) -0.15))\n                               nil))\n                      {:turn 1\n                       :player-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                       :opponent-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                       :player-score 0\n                       :opponent-score 0})\n                    (-> state\n                        (assoc :opponent-boxes opponent-rem)\n                        (assoc :player-boxes player-rem)\n                        (update :turn inc)\n                        (assoc :player-score player-score)\n                        (assoc :opponent-score opponent-score)))))]\n    ;; NOTE: for now, all of our turn advance effects are here\n    (reset!\n     popup-msg\n     (if (= (get state :turn) 3)\n       [final-msg\n        {\"See Result\"\n         (fn [] (reset!\n                 popup-msg\n                 [game-result-msg\n                  {\"Play Again\"\n                   #(do (popup-effect)\n                        (reset! popup-msg nil))}]))}]\n\n       [final-msg\n        {\"Continue\"\n         #(do (popup-effect)\n              (reset! popup-msg nil))}]))))\n\n#_(defn play-opponent-turn []\n    (let [state @game-state\n          opponent-boxes (:opponent-boxes state)\n          nonce (rand-int (combo/count-subsets opponent-boxes))\n          opponent-plays (if (= 3 (:turn state))\n                           opponent-boxes\n                           (combo/nth-subset opponent-boxes nonce))\n          opponent-total (reduce + (map js/parseInt opponent-plays))\n          opponent-msg (str \"Opponent plays \"\n                            \"[\" (s/join \", \" opponent-plays) \"]\"\n                            \" for a total of \"\n                            opponent-total)\n          played (keys @bid-boxes)\n          player-rem (st/difference (:player-boxes state) (set (keys @bid-boxes)))\n          player-total (reduce + (map js/parseInt played))\n          player-msg (str \"You played \"\n                          \"[\" (s/join \", \" (keys @bid-boxes)) \"]\"\n                          \" for a total of \"\n                          player-total)\n          verdict (compare player-total opponent-total)\n          verdict-msg (case verdict\n                        0 [:<> \"It's a tie. \" [:b \"Scores are unchanged.\"]]\n                        1 [:<> \"You win the bid.\" [:b \" You gain \" (str @pot-value) \" points\"]]\n                        -1 [:<> \"You lose the bid.\" [:b \" Opponent gains \" (str @pot-value) \" points\"]])\n          [player-score opponent-score] (case verdict\n                                          0 [(get state :player-score)\n                                             (get state :opponent-score)]\n                                          1 [(+ (js/parseInt @pot-value)\n                                                (get state :player-score))\n                                             (get state :opponent-score)]\n                                          -1 [(get state :player-score)\n                                              (+ (js/parseInt @pot-value)\n                                                 (get state :opponent-score))])\n          game-result-msg (when (= (get state :turn) 3)\n                            [:<>\n                             [:h1 {:style {:text-align :center}}\n                              (case (compare player-score opponent-score)\n                                0 \"\u2696\ufe0f \"\n                                1 \"\ud83c\udfc6\"\n                                -1 \"\ud83e\udd48\")]\n                             [:h3 \"Game result\"]\n                             (str\n                              \"The final score is \"\n                              player-score \" - \" opponent-score\n                              \".\")\n                             [:br]\n                             (case (compare player-score opponent-score)\n                               0 \"The game ends in a tie.\"\n                               1 \"You're the winner!\"\n                               -1 \"You were runner-up.\")])\n          emoji-msg (case verdict\n                      1 \"\u2705\"\n                      0 \"\u26aa\"\n                      -1 \"\ud83d\udeab\")\n          final-msg [:<>\n                     [:h1 {:style {:text-align :center}} emoji-msg]\n                     [:h3 \"Bid result\"]\n                     player-msg [:br]\n                     opponent-msg [:br]\n                     verdict-msg]\n          opponent-rem (st/difference opponent-boxes opponent-plays)\n          popup-effect\n          (fn []\n            (swap! bid-boxes\n                   (fn [boxes]\n                     (doseq [[_face-value [box-ref _reset-fn]] boxes]\n                       (set! (-> box-ref .-current .-visible) false)\n                     ;; this is our lazy way of preventing it from being interacted with\n                       (set! (-> box-ref .-current .-position .-y) 15))\n                     (swap! hidden-boxes #(into % boxes))\n                     nil))\n            (reset! bid-total 0)\n            (reset! pot-value (roll-pot))\n            (reset! game-state\n                    (if (= (get state :turn) 3)\n                      (do\n                        (swap! hidden-boxes\n                               (fn [boxes]\n                                 (doseq [[_face-value [box-ref reset-fn]] boxes]\n                                   (set! (-> box-ref .-current .-visible) true)\n                                   (reset-fn)\n                                   (set! (-> box-ref .-current .-position .-y) -0.15))\n                                 nil))\n                        {:turn 1\n                         :player-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :opponent-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :player-score 0\n                         :opponent-score 0})\n                      (-> state\n                          (assoc :opponent-boxes opponent-rem)\n                          (assoc :player-boxes player-rem)\n                          (update :turn inc)\n                          (assoc :player-score player-score)\n                          (assoc :opponent-score opponent-score)))))]\n    ;; NOTE: for now, all of our turn advance effects are here\n      (reset!\n       popup-msg\n       (if (= (get state :turn) 3)\n         [final-msg\n          {\"See Result\"\n           (fn [] (reset!\n                   popup-msg\n                   [game-result-msg\n                    {\"Play Again\"\n                     #(do (popup-effect)\n                          (reset! popup-msg nil))}]))}]\n\n         [final-msg\n          {\"Continue\"\n           #(do (popup-effect)\n                (reset! popup-msg nil))}]))))\n\n(def tutorial-panel\n  [:<>\n   [:h3 \"Basics:\"]\n   [:p \"Each turn the black die is rolled. The number rolled becomes the value of the pot. You then bid from your hand (by dragging coins to the highlighted play area) to try to win the pot. Once you submit your bid, your opponent will bid from their hand. If there's a higher bidder, the pot value is added to their score. Everything that has been bid is discarded. After three turns, the player with a higher score wins.\"]\n   [:h3 \"Opponent Strategy:\"]\n   [:p \"For the first two turns the opponent will bid randomly (uniform chance of playing any of the available moves). On the third turn, the opponent will always bid whatever is left in their hand.\"]])\n\n(defn move-combo [is-done selected [i move]]\n  (into [:div {:style {:display :flex\n                       :min-width \"8px\"\n                       :margin 2\n                       :border :solid\n                       :background (when (= i selected)\n                                     (if is-done\n                                       \"red\"\n                                       \"yellow\"))}}]\n        (map (fn [item] [:div {:style {:border \"solid 1px\"\n                                       :padding 2}}\n                         (str item)]))\n        move))\n\n(defn show-hand [hand]\n  (into\n   [:div {:style {:display :flex :gap 2}}]\n   (map (fn [i] [:div {:style {:border :solid :border-radius 99 :aspect-ratio 1 :width \"1.7em\"\n                               :align-items :center :display :flex :justify-content :center}} i]))\n   hand))\n\n(defn roll-opp-move []\n  (let [spin-counter (r/atom nil)\n        interval-index (atom nil)\n        once-thru (atom false)\n        done (r/atom false)\n        roll (r/atom nil)]\n    (fn []\n      (let [state @game-state\n            opponent-boxes (sort (:opponent-boxes state))\n            numbered-opp-combos (map-indexed vector (combo/subsets opponent-boxes))\n            n-combos (count numbered-opp-combos)]\n        [:div\n         \"Opponent Hand:\"\n         [show-hand opponent-boxes]\n         \"Possible Opponent Moves:\"\n         (into [:div {:style\n                      {:display :flex\n                       :flex-wrap :wrap\n                       :flex-direction :row}}]\n               (map (partial move-combo @done @spin-counter))\n               numbered-opp-combos)\n         [:div {:style {:display :flex\n                        :margin 8\n                        :justify-content :flex-end}}\n          (if @done\n            [:button {:on-click #(do (reset! popup-msg nil)\n                                     (play-opponent-turn (second (nth numbered-opp-combos @roll))))}\n             \"Continue\"]\n            [:button {:on-click #(when (nil? @roll)\n                                   (if (= 3 (:turn state))\n                                     (do\n                                       (reset! roll (dec n-combos))\n                                       (reset! spin-counter (dec n-combos))\n                                       (reset! done true))\n                                     (do\n                                       (reset! roll (rand-int n-combos))\n                                       (reset!\n                                        interval-index\n                                        (js/setInterval\n                                         (fn []\n                                           (if @once-thru\n                                             (if (= @roll @spin-counter)\n                                               (do (js/clearInterval @interval-index)\n                                                   (reset! done true))\n                                               (swap! spin-counter inc))\n                                             (if (= @spin-counter (dec n-combos))\n                                               (do (reset! once-thru true)\n                                                   (reset! spin-counter 0))\n                                               (swap! spin-counter inc))))\n                                         25)))))}\n             \"SPIN\"])]]))))\n\n(defn show-moves []\n  (reset!\n   popup-msg\n   [[roll-opp-move]]))\n\n(defn text-panel []\n  [:div {:style {:z-index 100\n                 :display :flex\n                 :justify-content :space-around\n                 :background-color \"rgba(255,255,255,30%)\"\n                 :width \"100%\"\n                 :font-size 12\n                 :position :absolute}}\n   [:div\n    [:button {:style {:border-radius \"100%\"\n                      :margin-top 8\n                      :display :flex\n                      :justify-content :center\n                      :align-items :center\n                      :aspect-ratio 1\n                      :border :solid\n                      :padding 6}\n              :on-click #(reset! popup-msg [tutorial-panel {\"Continue\" (fn [] (reset! popup-msg nil))}])}\n     [:b \"?\"]]\n    [:a {:style {:margin-top 8\n                 :display :flex\n                 :justify-content :center\n                 :align-items :center}\n         :href \"license.txt\"}\n     \"License\"]]\n   [:div\n    [:h2 \"Opponent Score: \" (get @game-state :opponent-score)]\n    [:div \"Opponent Hand: \" [show-hand (sort (get @game-state :opponent-boxes))]]\n    [:h2 \"Turn: \" (get @game-state :turn) \"/3\"]]\n   [:div\n    [:h2 \"Your Score: \" (get @game-state :player-score)]\n    [:p \"Your Bid: \" @bid-total]\n    [:button {:on-click show-moves}\n     \"Submit Bid\"]]])\n\n(defn wood-tables []\n  (let [gltf (drei/useGLTF \"/assets/woodtable/scene.gltf\")\n        alt-object (useMemo #(.clone (.-scene gltf)))]\n    [:> Suspense {:fallback nil}\n     [:group\n      [:primitive {:object (.-scene gltf)\n                   :rotation [0 (/ Math/PI -2) 0]\n                   :position [-0.5 -4.15 -2.4]\n                   :scale 0.02}]\n      [:primitive {:object alt-object\n                   :position [0.5 -3.65 3.1]\n                   :rotation [0 (/ Math/PI 2) 0]\n                   :scale 0.018}]]]))\n\n(defn panel-fn []\n  [:div {:style {:display :flex\n                 :touch-action :none\n                 :flex-direction :column\n                 :flex-grow 1\n                 :height \"100%\"}}\n   (when-let [[msg btns] @popup-msg]\n     [popup-panel msg btns])\n   [text-panel]\n   [:> Suspense\n    {:fallback (r/as-element [:div {:style {:border :solid\n                                            :display :flex\n                                            :flex-grow 1\n                                            :align-items :center\n                                            :justify-content :center}}\n                              [:h1 \"Loading...\"]])\n     :style {:display :flex\n             :flex-grow 1}}\n    [:> fib/Canvas {:camera {:position\n                             ; [0 1 8]\n                             [0 10 8]\n                             :zoom 60\n                             :fov 50}\n                    :orthographic true}\n     [(r/adapt-react-class drei/AdaptiveDpr)]\n     ; [(r/adapt-react-class drei/Stats) {:showPanel 0}]\n     [:hemisphereLight {:intensity 0.2\n                        :color \"#ffffcb\"\n                        :ground-color \"#080820\"}]\n     [:ambientLight {:intensity 0.3}]\n     [:pointLight {:position [0.5 8 -3.5]\n                   :intensity 0.2\n                   :color \"white\"}]\n     [:f> pot-box @pot-value]\n     [:f> wood-tables]\n     [:RectAreaLight {:position [-0.5 -0.3 -1]\n                      :rotation [(/ Math/PI -2) 0 0]\n                      :ref #(swap! hover-effect-objs conj %)\n                      :castShadow false\n                      :intensity 0.8\n                      :visible false\n                      :width 5\n                      :height 3}]\n     [:group ;; player's hand\n      [:f> player-box {:position [-0.7 -0.15 2.5]\n                       :face-value 1}]\n      [:f> player-box {:position [0.5 -0.15 2.5]\n                       :face-value 2}]\n      [:f> player-box {:position [1.7 -0.15 2.5]\n                       :face-value 3}]\n      [:f> player-box {:position [-0.7 -0.15 3.7]\n                       :face-value 4}]\n      [:f> player-box {:position [0.5 -0.15 3.7]\n                       :face-value 5}]\n      [:f> player-box {:position [1.7 -0.15 3.7]\n                       :face-value 6}]]\n     [:mesh {:position [-0.5 -0.3 -1]\n             :ref #(reset! play-area %)}\n      [:BoxGeometry {:args [5 0.01 3]}]\n      [:meshStandardMaterial {:color \"lightgreen\"\n                              :transparent true\n                              :opacity 0.1}]]\n     [:mesh {:position [0 -3 0]\n             :rotation [(/ Math/PI -2) 0 0]}\n      [:PlaneGeometry {:args [30 30]}]\n      [:meshPhysicalMaterial {:color \"grey\"}]]\n     [(r/adapt-react-class drei/ContactShadows)\n      {:position [0 -0.29 0]\n       :opacity 1\n       :scale 20\n       :blur 1.75\n       :far 4.5}]]]])\n\n(defn main-panel []\n  [:f> panel-fn])\n"]}
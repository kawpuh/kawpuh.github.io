{"version":3,"sources":["tableground/views.cljs"],"mappings":"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","names":["tableground.views/rotate-fn","mesh-ref","new-r","tableground.views/roll-pot","cljs.core/rand-nth","tableground.views/intersect-point","js/shadow.js.shim.module$three.Vector3","tableground.views/hot-plane","cljs.core.atom","tableground.views/play-area","tableground.views/box-geom","js/shadow.js.shim.module$three.BoxGeometry","tableground.views/bid-boxes","tableground.views/hidden-boxes","tableground.views/pot-value","reagent.core.atom","tableground.views/bid-total","tableground.views/popup-msg","tableground.views/game-state","js/tableground","js/tableground.views","js/tableground.views.grid-offsets","tableground.views/grid-offsets","tableground.views/compute-play-area-bounds","cljs.core/deref","bounds","get-xz","p1__18428#","p1__18429#","cljs.core.juxt","geom","p1__18430#","p1__18431#","cljs.core.map","cljs.core.partial","cljs.core/map","cljs.core/+","cljs.core.repeat","tableground.views/play-area-intersect?","x","z","vec__18432","vec__18435","cljs.core.nth","vec__18438","min-x","min-z","max-x","max-z","tableground.views/compute-play-area-center","vec__18441","vec__18444","vec__18447","cljs.core/*","tableground.views/enforce-and-return-played","played","cljs.core.doall","p__18450","p__18451","vec__18452","vec__18455","vec__18458","_face-text","_reset-fn","p__18461","p__18462","vec__18463","vec__18466","dx","dz","ox","oz","tableground.views/dot-geom","js/shadow.js.shim.module$three.CylinderGeometry","tableground.views/dot-mat","js/shadow.js.shim.module$three.MeshPhysicalMaterial","cljs.core/clj->js","tableground.views/pot-box-ref","tableground.views/dice-rotations","tableground.views/pot-box","face-text","js/shadow.js.shim.module$react.useRef","_","cljs.core/reset!","rot","cljs.core.get","font-loader","js/shadow.js.shim.module$$react_three$fiber.useLoader","js/shadow.js.shim.module$three$addons$loaders$FontLoader.FontLoader","reagent.core/adapt-react-class","js/shadow.js.shim.module$$react_three$drei.Text3D","var_args","G__18470","tableground.views/player-box","js/Error","p__18471","map__18472","cljs.core/--destructure-map","position","color","line-ref","set-line-vis","on?","set-xz","p__18473","vec__18474","set-y","y","set-hover","hovered?","js/document","bind-hover","js/shadow.js.shim.module$$use_gesture$react.useHover","e","and__5043__auto__","cljs.core/not","bind-drag","js/shadow.js.shim.module$$use_gesture$react.useDrag","cljs.core/second","cljs.core.dissoc","cljs.core.swap_BANG_","cljs.core/keys","js/parseInt","cljs.core.reduce","cljs.core.assoc","cljs.core.merge","cljs.core.js__GT_clj","js/shadow.js.shim.module$$react_three$drei.Line","tableground.views/plane-from-geom","plane","js/shadow.js.shim.module$three.Plane","norm","pt","tableground.views/popup-panel","msg","btns","cljs.core.into","iter__5523__auto__","s__18478","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__18480","cljs.core/chunk-buffer","i__18479","vec__18481","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__18477","cljs.core/chunk-rest","vec__18484","cljs.core/first","cljs.core/cons","cljs.core/rest","btn-txt","btn-fn","tableground.views/play-opponent-turn","state","vec__18488","opponent-boxes","nonce","cljs.core/rand-int","clojure.math.combinatorics/count-subsets","opponent-plays","cljs.core._EQ_","clojure.math.combinatorics/nth-subset","opponent-total","opponent-msg","clojure.string.join","player-rem","clojure.set.difference","cljs.core/set","player-total","player-msg","verdict","cljs.core/compare","verdict-msg","G__18491","player-score","opponent-score","G__18492","game-result-msg","G__18493","emoji-msg","G__18494","G__18495","final-msg","opponent-rem","boxes","seq__18496","chunk__18497","count__18498","i__18499","vec__18512","vec__18515","c__5568__auto__","cljs.core/chunk-first","vec__18518","vec__18521","cljs.core/next","_face-value","box-ref","p1__18487#","seq__18524","chunk__18525","count__18526","i__18527","vec__18540","vec__18543","vec__18546","vec__18549","reset-fn","cljs.core.update","cljs.core/inc","tableground.views/submit-bid","tableground.views/tutorial-panel","tableground.views/text-panel","cljs.core.sort","p1__18552#","p1__18553#","tableground.views/panel-fn","vec__18554","js/shadow.js.shim.module$react.Suspense","reagent.core.as_element","js/shadow.js.shim.module$$react_three$fiber.Canvas","js/shadow.js.shim.module$$react_three$drei.Sky","js/shadow.js.shim.module$$react_three$drei.ContactShadows","tableground.views/main-panel"],"sourcesContent":["(ns tableground.views\n  (:require\n   [\"three\" :as three]\n   [\"@react-three/fiber\" :as fib :refer [useFrame]]\n   [\"@react-three/drei\" :as drei]\n   [\"react\" :refer [useRef useState useEffect Suspense]]\n   [\"three/addons/loaders/FontLoader\" :refer [FontLoader]]\n   [reagent.core :as r]\n   [clojure.math.combinatorics :as combo]\n   [clojure.set :as st]\n   [clojure.string :as s]\n   ; [re-frame.core :as re-frame]\n   [\"@use-gesture/react\" :refer [useDrag useHover]]))\n\n(set! *warn-on-infer* true)\n; (re-frame/reg-event-db\n;  ::tmp\n;  (fn [db k v]\n;    (assoc db k v)))\n\n; (re-frame/reg-event-db\n;  ::tmp-in\n;  (fn [db kl v]\n;    (assoc-in db kl v)))\n\n; (re-frame/reg-event-fx\n;  ::tmp-fn\n;  (fn [{:keys [db]} afn]\n;    (afn db)))\n\n; (re-frame/reg-sub\n;  ::tmp\n;  (fn [db [_ k]]\n;    (get db k)))\n\n; (re-frame/reg-sub\n;  ::tmp-in\n;  (fn [db [_ kl]]\n;    (get-in db kl)))\n\n; (defn sub< [subv] (re-frame/subscribe subv))\n; (defn evt> [evtv] (re-frame/dispatch evtv))\n\n;; NOTES:\n;; The most efficient way to update items is by calling setter methods\n;; However, it's easier to reason about state when we're more declarative\n;; So: we will tend to update some intermediate state, then use this state\n;; to call appropriate setter methods\n\n(defn rotate-fn [mesh-ref]\n  (let [new-r (-> mesh-ref .-current .-rotation .-x (+ 0.005))]\n    (set! (-> mesh-ref .-current .-rotation .-x) new-r)))\n\n; (defonce floor-plane (three/Plane. (three/Vector3. 0 1.5 0) 0))\n; (defonce box-geom (three/CylinderGeometry. 0.5 0.5 1 16))\n(defn roll-pot [] (rand-nth [\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"]))\n(def intersect-point (three/Vector3.))\n(def hot-plane (atom nil))\n(def play-area (atom nil))\n(def box-geom (three/BoxGeometry. 1 1 1))\n(def bid-boxes (atom nil)) ;; {face-value [ref reset-fn]}\n(def hidden-boxes (atom nil))\n(def pot-value (r/atom (roll-pot)))\n(def bid-total (r/atom 0))\n(def popup-msg (r/atom nil)) ;; [msg-hiccup {button-text button-fn}]\n(def game-state (r/atom {:turn 1\n                         :player-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :opponent-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                         :player-score 0\n                         :opponent-score 0}))\n\n(defonce grid-offsets [[-1.2 -0.6]\n                       [0 -0.6]\n                       [1.2 -0.6]\n                       [-1.2 0.6]\n                       [0 0.6]\n                       [1.2 0.6]])\n\n(defn compute-play-area-bounds []\n  ; returns [[min-x min-z] [max-x max-z]]\n  (let [bounds @play-area\n        get-xz (juxt #(.-x %) #(.-z %))\n        geom ^three/BufferGeometry (.-geometry bounds)]\n    (.computeBoundingBox geom)\n    (->> (.-boundingBox geom)\n         ((juxt #(.-min %) #(.-max %)))\n         (map get-xz)\n         (map (partial map +) (repeat (get-xz (.-position bounds)))))))\n\n(defn play-area-intersect? [x z]\n  (let [[[min-x min-z] [max-x max-z]] (compute-play-area-bounds)]\n    (and (< min-x x max-x) (< min-z z max-z))))\n\n(defn compute-play-area-center []\n  (let [[[min-x min-z] [max-x max-z]] (compute-play-area-bounds)]\n    (map (partial * 0.5) [(+ min-x max-x) (+ min-z max-z)])))\n\n(defn enforce-and-return-played [played]\n  (doall\n   (map\n    (fn [[_face-text [mesh-ref _reset-fn]] [x z]]\n      (set! (-> mesh-ref .-current .-position .-x) x)\n      (set! (-> mesh-ref .-current .-position .-z) z))\n    played\n    (map (fn [[dx dz] [ox oz]] [(+ dx ox) (+ dz oz)])\n         grid-offsets\n         (repeat (compute-play-area-center)))))\n  played)\n\n(def dot-geom\n  (three/CylinderGeometry. 0.1 0.1 0.02 16))\n(def dot-mat (three/MeshPhysicalMaterial. (clj->js {:color \"grey\"})))\n\n(def pot-box-ref (atom nil))\n(def dice-rotations {\"1\" [0 0 0]\n                     \"2\" [-1.57 0 0]\n                     \"3\" [0 0 1.57]\n                     \"4\" [0 0 -1.57]\n                     \"5\" [1.57 0 0]\n                     \"6\" [-3.14 0 0]})\n\n(defn pot-box\n  ; ([] [:f> pot-box \"1\"])\n  ([face-text]\n   (let [mesh-ref (useRef)\n         _ (reset! pot-box-ref mesh-ref)\n         rot (get dice-rotations face-text)\n         font-loader (fib/useLoader FontLoader \"/marcellus.json\")]\n     [:group\n      [:mesh {:ref mesh-ref\n              :geometry box-geom\n              :castShadow true\n              :receiveShadow true\n              :position [1 0 -3.5]\n              ; :position [-2 2.2 3.5]\n              :rotation rot}\n       [:group ;; 1\n        [:mesh {:position [0 0.5 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 2\n        [:mesh {:position [-0.25 -0.25 0.5]\n                :rotation [-1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 0.25 0.5]\n                :rotation [-1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 3\n        [:mesh {:position [0.5 0 0]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.5 0.25 0.25]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.5 -0.25 -0.25]\n                :rotation [0 0 1.57]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 4\n        [:mesh {:position [-0.5 0.25 -0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 -0.25 -0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 -0.25 0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.5 0.25 0.25]\n                :rotation [0 0 -1.57]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 5\n        [:mesh {:position [0 0 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.25 -0.5]\n                :rotation [1.57 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:group ;; 6\n        [:mesh {:position [-0.25 -0.5 -0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.5 0]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [-0.25 -0.5 0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 -0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 0]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]\n        [:mesh {:position [0.25 -0.5 0.3]\n                :rotation [-3.14 0 0]\n                :material dot-mat\n                :geometry dot-geom}]]\n       [:meshPhysicalMaterial {:color \"black\"}]]\n      [:mesh ;; text display\n       {:position [-0.2 0 -3.8]\n        :rotation [-1.57 0 0]}\n       [:BoxGeometry {:args [1 1 0.1]}]\n       [:meshPhysicalMaterial\n        {:color \"black\"}]\n       [(r/adapt-react-class drei/Text3D)\n        {:font (.-data font-loader)\n         :height 0.05\n         :size 0.5\n         :rotation [1.57 0 0]\n         :position [-0.15 -0.15 0.1]}\n        face-text\n        [:meshPhysicalMaterial\n         {:color \"black\"\n          :emissive \"gold\"}]]]])))\n\n(defn player-box\n  ([] [:f> player-box {:position [0 0 0] :color \"orange\" :face-text \"0\"}])\n  ([{:keys [position color face-text]}]\n   (let [mesh-ref (useRef)\n         line-ref (useRef)\n         font-loader (fib/useLoader FontLoader \"/marcellus.json\")\n         set-line-vis (fn [on?]\n                        (set! (-> line-ref .-current .-visible) on?))\n         set-xz (fn [[x z]]\n                  (set! (-> mesh-ref .-current .-position .-x) x)\n                  (set! (-> mesh-ref .-current .-position .-z) z))\n         set-y (fn [y] (set! (-> mesh-ref .-current .-position .-y) y))\n         set-hover (fn [hovered?]\n                     (set! (-> js/document .-body .-style .-cursor)\n                           (if hovered? \"pointer\" \"\")))\n         bind-hover (useHover\n                     (fn [e]\n                       (cond\n                         (and ^js/boolean (.-last e)\n                              (not ^js/boolean (.-down e))) (set-hover false)\n                         ^js/boolean (.-first e) (set-hover true))))\n\n         bind-drag (useDrag\n                     (fn [e]\n                       (when ^js/boolean (.-first e)\n                         ;; save start position\n                         (set-line-vis true)\n                         (set-y (+ (second position) 0.3)))\n\n                       ;; set intersect-point\n                       (.intersectPlane ^three/Ray (.-ray (.-event e)) @hot-plane intersect-point)\n                       (if ^js/boolean (.-last e)\n                         ;; trying to place\n                         (do\n                           (if-not\n                             (play-area-intersect? (.-x intersect-point) (.-z intersect-point))\n                             ;; reset box\n                             (do\n                               (set-xz [(nth position 0) (nth position 2)])\n                               (->> (fn [played]\n                                      (enforce-and-return-played\n                                        (dissoc played face-text)))\n                                    (swap! bid-boxes)\n                                    keys\n                                    (map js/parseInt)\n                                    (reduce +)\n                                    (reset! bid-total)))\n                             ;; play box\n                             (->> (fn [played]\n                                    (enforce-and-return-played\n                                      (assoc played face-text\n                                             [mesh-ref #(set-xz [(nth position 0) (nth position 2)])])))\n                                  (swap! bid-boxes)\n                                  keys\n                                  (map js/parseInt)\n                                  (reduce +)\n                                  (reset! bid-total)))\n                           ;; put the object down / disable drag effects\n                           (set-hover false)\n                           (set-line-vis false)\n                           (set-y (second position)))\n\n                         ;; normal dragging\n                         (when (.-active e)\n                           (set-xz [(.-x intersect-point) (.-z intersect-point)])))\n                       (.stopPropagation (.-event e))))]\n     [:mesh\n      (merge (js->clj (bind-drag)) (js->clj (bind-hover)) {:style {:touch-action :none}\n                                                           :ref mesh-ref\n                                                           :geometry box-geom\n                                                           :castShadow true\n                                                           :receiveShadow true\n                                                           :position position})\n      [(r/adapt-react-class drei/Line)\n       {:ref line-ref\n        :points [[0 0 0] [0 -1 0]]\n        :color \"blue\"\n        :line-width 3\n        :visible true}]\n      [(r/adapt-react-class drei/Text3D)\n       {:font (.-data font-loader)\n        :height 0.15\n        :size 0.5\n        :position [-0.15 0.4 0.2]\n        :rotation [-1.57 0 0]}\n       face-text\n       [:meshPhysicalMaterial\n        {:color \"black\"\n         :emissive \"gold\"}]]\n      [:meshStandardMaterial {:color color}]])))\n\n;; TODO: this doesn't seem worth the complexity\n;; better to just define a global height constant somewhere?\n(defn plane-from-geom [geom]\n  (let [plane (three/Plane.)\n        norm (three/Vector3.)\n        pt (three/Vector3.)]\n    (.applyQuaternion (.set norm 0 0 1) ^three/quaternion (.-quaternion geom))\n    (.copy pt (.-position geom))\n    (.setFromNormalAndCoplanarPoint plane norm pt)\n    plane))\n\n(defn popup-panel [msg btns]\n  [:div {:style {:position :fixed\n                 :z-index 101\n                 :height \"98%\"\n                 :width \"98%\"\n                 :display :flex\n                 :align-items :center\n                 :justify-content :center\n                 :background-color \"rgba(200,200,200, 0.5)\"}}\n   [:div {:style {:background-color \"white\"\n                  :display :flex\n                  :flex-direction :column\n                  :margin \"16px\"\n                  :padding \"0px 24px 24px 24px\"\n                  :box-shadow \"3px 4px 8px\"}}\n    [:p {:style {:margin-left \"16px\"\n                 :margin-right \"16px\"}}\n     msg]\n    (into\n     [:<>]\n     (for [[btn-txt btn-fn] btns]\n       [:button {:style {:align-self :end}\n                 :on-click btn-fn}\n        btn-txt]))]])\n\n(defn play-opponent-turn []\n  (swap! game-state\n         (fn [state]\n           (let [opponent-boxes (:opponent-boxes state)\n                 nonce (rand-int (combo/count-subsets opponent-boxes))\n                 opponent-plays (if (= 3 (:turn state))\n                                  opponent-boxes\n                                  (combo/nth-subset opponent-boxes nonce))\n                 opponent-total (reduce + (map js/parseInt opponent-plays))\n                 opponent-msg (str \"Opponent plays \"\n                                   \"[\" (s/join \", \" opponent-plays) \"]\"\n                                   \" for a total of \"\n                                   opponent-total)\n                 played (keys @bid-boxes)\n                 player-rem (st/difference (:player-boxes state) (set (keys @bid-boxes)))\n                 player-total (reduce + (map js/parseInt played))\n                 player-msg (str \"You played \"\n                                 \"[\" (s/join \", \" (keys @bid-boxes)) \"]\"\n                                 \" for a total of \"\n                                 player-total)\n                 verdict (compare player-total opponent-total)\n                 verdict-msg (case verdict\n                               0 [:<> \"It's a tie. \" [:b \"Scores are unchanged.\"]]\n                               1 [:<> \"You win the bid.\" [:b \" You gain \" (str @pot-value) \" points\"]]\n                               -1 [:<> \"You lose the bid.\" [:b \" Opponent gains \" (str @pot-value) \" points\"]])\n                 [player-score opponent-score] (case verdict\n                                                 0 [(get state :player-score)\n                                                    (get state :opponent-score)]\n                                                 1 [(+ (js/parseInt @pot-value)\n                                                       (get state :player-score))\n                                                    (get state :opponent-score)]\n                                                 -1 [(get state :player-score)\n                                                     (+ (js/parseInt @pot-value)\n                                                        (get state :opponent-score))])\n                 game-result-msg (when (= (get state :turn) 3)\n                                   [:<>\n                                    [:h3 \"Game result\"]\n                                    (str\n                                     \"The final score is \"\n                                     player-score \" - \" opponent-score\n                                     \".\")\n                                    [:br]\n                                    (case (compare player-score opponent-score)\n                                      0 \"The game ends in a tie.\"\n                                      1 \"You're the winner!\"\n                                      -1 \"You were runner-up.\")])\n                 emoji-msg (if (= (get state :turn) 3)\n                             (case (compare player-score opponent-score)\n                               0 \"\u2696\ufe0f \"\n                               1 \"\ud83c\udfc6\"\n                               -1 \"\ud83e\udd48\")\n                             (case verdict\n                               1 \"\u2705\"\n                               0 \"\u26aa\"\n                               -1 \"\ud83d\udeab\"))\n                 final-msg [:<>\n                            [:h1 {:style {:text-align :center}} emoji-msg]\n                            [:h3 \"Bid result\"]\n                            player-msg [:br]\n                            opponent-msg [:br]\n                            verdict-msg\n                            game-result-msg]\n                 opponent-rem (st/difference opponent-boxes opponent-plays)]\n             ;; NOTE: for now, all of our turn advance effects are here\n             (reset! popup-msg [final-msg {(if (= (get state :turn) 3) \"Play Again.\" \"Continue.\") #(reset! popup-msg nil)}])\n             (swap! bid-boxes\n                    (fn [boxes]\n                      (doseq [[_face-value [box-ref _reset-fn]] boxes]\n                        (set! (-> box-ref .-current .-visible) false)\n                        ;; this is our lazy way of preventing it from being interacted with\n                        (set! (-> box-ref .-current .-position .-y) 15))\n                      (swap! hidden-boxes #(into % boxes))\n                      nil))\n             (reset! bid-total 0)\n             (reset! pot-value (roll-pot))\n             (if (= (get state :turn) 3)\n               (do\n                 (swap! hidden-boxes\n                        (fn [boxes]\n                          (doseq [[_face-value [box-ref reset-fn]] boxes]\n                            (set! (-> box-ref .-current .-visible) true)\n                            (reset-fn)\n                            (set! (-> box-ref .-current .-position .-y) 0.2))\n                          nil))\n                 {:turn 1\n                  :player-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                  :opponent-boxes #{\"1\" \"2\" \"3\" \"4\" \"5\" \"6\"}\n                  :player-score 0\n                  :opponent-score 0})\n               (-> state\n                   (assoc :opponent-boxes opponent-rem)\n                   (assoc :player-boxes player-rem)\n                   (update :turn inc)\n                   (assoc :player-score player-score)\n                   (assoc :opponent-score opponent-score)))))))\n\n(defn submit-bid []\n  (play-opponent-turn))\n\n(def tutorial-panel\n  [:<>\n   [:h3 \"Basics:\"]\n   [:p \"Each turn the black die is rolled. The number rolled becomes the value of the pot. You then bid from your hand (by dragging boxes to the green pad) to try to win the pot. Once you submit your bid, your opponent will bid from their hand. If there's a higher bidder, the pot value is added to their score. Everything that has been bid is discarded. After three turns, the player with a higher score wins.\"]\n   [:h3 \"Opponent Strategy:\"]\n   [:p \"For the first two turns the opponent will bid randomly (uniform chance of playing any of the available moves). On the third turn, the opponent will always bid whatever is left in their hand.\"]\n   [:br]\n   [:p \"Can you win three games in a row?\"]])\n\n(defn text-panel []\n  [:div {:style {:z-index 100\n                 :transform-origin \"top left\"\n                 :transform \"scale(0.7)\"\n                 :left 8\n                 :position :absolute}}\n   [:button {:style {:border-radius \"100%\"\n                     :margin-top 8\n                     :display :flex\n                     :justify-content :center\n                     :align-items :center\n                     :aspect-ratio 1\n                     :border :solid\n                     :padding 6}\n             :on-click #(reset! popup-msg [tutorial-panel {\"Continue.\" (fn [] (reset! popup-msg nil))}])}\n    [:b \"?\"]]\n   [:h1 \"Turn: \" (get @game-state :turn) \"/3\"]\n   [:h2 \"Opponent Score: \" (get @game-state :opponent-score)]\n   [:p \"Opponent Hand: \" (s/join \", \" (sort (get @game-state :opponent-boxes)))]\n   [:h2 \"Your Score: \" (get @game-state :player-score)]\n   [:p \"Your Bid: \" @bid-total]\n   [:button {:on-click submit-bid}\n    \"Submit Bid\"]])\n\n(defn panel-fn []\n  [:div {:style {:display :flex\n                 :touch-action :none\n                 :flex-direction :column\n                 :flex-grow 1\n                 :height \"98%\"\n                 :margin-right 16}}\n   (when-let [[msg btns] @popup-msg]\n     [popup-panel msg btns])\n   [text-panel]\n   [:> Suspense\n    {:fallback (r/as-element [:div [:h1 \"loading...\"]])\n     :style {:display :flex\n             :flex-grow 1}}\n    [:> fib/Canvas {:camera {:position\n                             ; [1 0 5]\n                             [0 10 8]\n                             :fov 50}}\n     [:hemisphereLight {:intensity 0.2\n                        :color \"#ffffcb\"\n                        :ground-color \"#080820\"}]\n     [(r/adapt-react-class drei/Sky)\n      {:distance 450000\n       :sunPosition [0 1 0]\n       :inclination 0\n       :azimuth 0.25}]\n     [:directionalLight {:position [5 10 -10]\n                         :intensity 0.2}]\n     [:SpotLight {:position [2 5.2 -4.5]\n                  :intensity 0.2\n                  :target (.-current pot-box-ref)\n                  :color \"white\"}]\n     [:group ;; pot\n      [:f> pot-box @pot-value]]\n     [:group ;; player's hand\n      [:f> player-box {:position [-0.7 0.2 2.5]\n                       :color \"red\"\n                       :face-text \"1\"}]\n      [:f> player-box {:position [0.5 0.2 2.5]\n                       :color \"orange\"\n                       :face-text \"2\"}]\n      [:f> player-box {:position [1.7 0.2 2.5]\n                       :color \"yellow\"\n                       :face-text \"3\"}]\n      [:f> player-box {:position [-0.7 0.2 3.7]\n                       :color \"green\"\n                       :face-text \"4\"}]\n      [:f> player-box {:position [0.5 0.2 3.7]\n                       :color \"blue\"\n                       :face-text \"5\"}]\n      [:f> player-box {:position [1.7 0.2 3.7]\n                       :color \"violet\"\n                       :face-text \"6\"}]]\n     [:mesh {:position [0.5 -0.3 3]\n             :rotation [-1.57 0 0]}\n      [:BoxGeometry {:args [5 4 0.01]}]\n      [:meshPhysicalMaterial {:color \"#f0f0f0\"}]]\n     [:mesh {:position [0 -0.3 -1]\n             :ref #(reset! play-area %)}\n      [:BoxGeometry {:args [5 0.01 3]}]\n      [:meshPhysicalMaterial {:color \"lightgreen\"}]]\n     [:mesh {:position [0 -0.3 -3]\n             :rotation [-1.57 0 0]\n             :ref #(reset! hot-plane (when % (plane-from-geom %)))}]\n     [(r/adapt-react-class drei/ContactShadows)\n      {:position [0 -0.29 0]\n       :opacity 1\n       :scale 20\n       :blur 1.75\n       :far 4.5}]]]])\n\n(defn main-panel []\n  [:f> panel-fn])\n"]}